{"testOrder":["org.springframework.boot.BannerTests.testDefaultBanner","org.springframework.boot.BannerTests.testDisableBannerInContext","org.springframework.boot.BannerTests.testBannerInContext","org.springframework.boot.BannerTests.testCustomBannerInContext","org.springframework.boot.BannerTests.testCustomBanner","org.springframework.boot.BannerTests.testDefaultBannerInLog","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.detectHttpMessageSenderWhenFalseShouldDisableDetection","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.interceptorsWhenInterceptorsAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.createWithCustomizersShouldApplyCustomizers","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.setCheckConnectionForFault","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.messageSendersCollectionWhenSendersAreAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.setCheckConnectionForError","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.customizersShouldReplaceExisting","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.setFaultMessageResolver","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalInterceptorsWhenInterceptorsAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.interceptorsCollectionWhenInterceptorsAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalInterceptorsShouldAddToExistingWebServiceTemplate","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.setDefaultUri","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.messageSendersWhenSendersAreAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalMessageSendersShouldAddToExisting","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalCustomizersShouldAddToExisting","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.customizersWhenCustomizersAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalMessageSendersWhenSendersAreAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.setDestinationProvider","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.buildShouldDetectHttpMessageSender","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.messageSendersShouldApply","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalMessageSendersShouldKeepDetectedHttpMessageSender","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.interceptorsShouldReplaceExisting","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.messageSendersShouldReplaceExisting","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.setMarshaller","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalInterceptorsCollectionWhenInterceptorsAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.interceptorsShouldApply","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.customizersShouldBeAppliedLast","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.setTransformerFactoryClass","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.customizersCollectionWhenCustomizersAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.setUnmarshaller","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.setWebServiceMessageFactory","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalMessageSendersCollectionWhenSendersAreAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalCustomizersWhenCustomizersAreNullShouldThrowException","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.customizersShouldApply","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalInterceptorsShouldAddToExisting","org.springframework.boot.webservices.client.WebServiceTemplateBuilderTests.additionalCustomizersCollectionWhenCustomizersAreNullShouldThrowException","org.springframework.boot.BeanDefinitionLoaderTests.loadClassName","org.springframework.boot.BeanDefinitionLoaderTests.loadGroovyName","org.springframework.boot.BeanDefinitionLoaderTests.loadPackageName","org.springframework.boot.BeanDefinitionLoaderTests.loadResourceName","org.springframework.boot.BeanDefinitionLoaderTests.loadGroovyResourceWithNamespace","org.springframework.boot.BeanDefinitionLoaderTests.loadGroovyResource","org.springframework.boot.BeanDefinitionLoaderTests.loadPackageAndClassDoesNotDoubleAdd","org.springframework.boot.BeanDefinitionLoaderTests.loadXmlResource","org.springframework.boot.BeanDefinitionLoaderTests.loadPackage","org.springframework.boot.BeanDefinitionLoaderTests.loadPackageNameWithoutDot","org.springframework.boot.BeanDefinitionLoaderTests.loadClass","org.springframework.boot.webservices.client.HttpWebServiceMessageSenderBuilderTests.buildWithRequestFactorySupplier","org.springframework.boot.webservices.client.HttpWebServiceMessageSenderBuilderTests.buildWithReadAndConnectTimeout","org.springframework.boot.webservices.client.HttpWebServiceMessageSenderBuilderTests.buildUsesHttpComponentsByDefault","org.springframework.boot.DefaultApplicationArgumentsTests.getOptionValues","org.springframework.boot.DefaultApplicationArgumentsTests.containsOption","org.springframework.boot.DefaultApplicationArgumentsTests.argumentsMustNotBeNull","org.springframework.boot.DefaultApplicationArgumentsTests.optionNames","org.springframework.boot.DefaultApplicationArgumentsTests.getArgs","org.springframework.boot.DefaultApplicationArgumentsTests.getNoNonOptionArgs","org.springframework.boot.DefaultApplicationArgumentsTests.getNonOptionArgs","org.springframework.boot.webservices.client.HttpWebServiceMessageSenderBuilderSimpleIntegrationTests.buildUseUseSimpleClientByDefault","org.springframework.boot.webservices.client.HttpWebServiceMessageSenderBuilderSimpleIntegrationTests.buildWithCustomTimeouts","org.springframework.boot.EnvironmentConverterTests.servletPropertySourcesAreNotCopiedOverIfNotWebEnvironment","org.springframework.boot.EnvironmentConverterTests.servletPropertySourcesArePresentWhenTypeToConvertIsWeb","org.springframework.boot.EnvironmentConverterTests.convertedEnvironmentHasSameActiveProfiles","org.springframework.boot.EnvironmentConverterTests.standardServletEnvironmentIsConverted","org.springframework.boot.EnvironmentConverterTests.envClassSameShouldReturnEnvironmentUnconvertedEvenForWeb","org.springframework.boot.EnvironmentConverterTests.envClassSameShouldReturnEnvironmentUnconverted","org.springframework.boot.EnvironmentConverterTests.convertedEnvironmentHasSameConversionService","org.springframework.boot.webservices.client.HttpWebServiceMessageSenderBuilderOkHttp3IntegrationTests.buildUseOkHttp3ByDefault","org.springframework.boot.webservices.client.HttpWebServiceMessageSenderBuilderOkHttp3IntegrationTests.buildWithCustomTimeouts","org.springframework.boot.ExitCodeGeneratorsTests.getExitCodeWhenNoGeneratorsShouldReturnZero","org.springframework.boot.ExitCodeGeneratorsTests.getExitCodeWhenAllPositiveShouldReturnHighestValue","org.springframework.boot.ExitCodeGeneratorsTests.getExitCodeWhenAllNegativeShouldReturnLowestValue","org.springframework.boot.ExitCodeGeneratorsTests.addWhenGeneratorIsNullShouldThrowException","org.springframework.boot.ExitCodeGeneratorsTests.addAllWhenGeneratorsIsNullShouldThrowException","org.springframework.boot.ExitCodeGeneratorsTests.getExitCodeWhenGeneratorThrowsShouldReturnOne","org.springframework.boot.ExitCodeGeneratorsTests.getExitCodeWhenUsingExitCodeExceptionMapperShouldCallMapper","org.springframework.boot.web.servlet.view.MustacheViewTests.viewResolvesHandlebars","org.springframework.boot.ImageBannerTests.printBannerWhenShouldPrintAllColors","org.springframework.boot.ImageBannerTests.printBannerShouldCalculateHeight","org.springframework.boot.ImageBannerTests.printBannerShouldRenderGradient","org.springframework.boot.ImageBannerTests.printBannerWhenInvertedShouldResetForegroundAndBackground","org.springframework.boot.ImageBannerTests.printBannerShouldResetForegroundAndBackground","org.springframework.boot.ImageBannerTests.printBannerShouldPrintBlackAsBlackLowLuminance","org.springframework.boot.ImageBannerTests.printBannerWhenAnimatesShouldPrintAllFrames","org.springframework.boot.ImageBannerTests.printBannerWhenHasMarginPropertyShouldPrintSizedMargin","org.springframework.boot.ImageBannerTests.printBannerWhenInvertedShouldPrintBlackAsBlackHighLuminance","org.springframework.boot.ImageBannerTests.printBannerShouldCapWidthAndCalculateHeight","org.springframework.boot.ImageBannerTests.printBannerShouldPrintMargin","org.springframework.boot.ImageBannerTests.printBannerWhenHasHeightPropertyShouldSetHeight","org.springframework.boot.ImageBannerTests.printBannerWhenInvertedShouldPrintWhiteAsBrightWhiteLowLuminance","org.springframework.boot.ImageBannerTests.printBannerShouldPrintWhiteAsBrightWhiteHighLuminance","org.springframework.boot.web.servlet.view.MustacheViewResolverTests.resolveExisting","org.springframework.boot.web.servlet.view.MustacheViewResolverTests.setsContentType","org.springframework.boot.web.servlet.view.MustacheViewResolverTests.resolveNonExistent","org.springframework.boot.OverrideSourcesTests.beanInjectedToMainConfiguration","org.springframework.boot.OverrideSourcesTests.primaryBeanInjectedProvingSourcesNotOverridden","org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.withConfigurationAnnotation","org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.errorPageFilterRegistrationCanBeDisabled","org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.withConfiguredSource","org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.servletContextPropertySourceIsAvailablePriorToRefresh","org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.mainClassHasSensibleDefault","org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.executableWarThatUsesServletInitializerDoesNotHaveErrorPageFilterConfigured","org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.applicationBuilderCanBeCustomized","org.springframework.boot.web.servlet.support.SpringBootServletInitializerTests.failsWithoutConfigure","org.springframework.boot.ReproTests.orderProfilesWithYamlAndNoOverride","org.springframework.boot.ReproTests.reverseOrderOfProfilesWithYaml","org.springframework.boot.ReproTests.activeProfilesWithYamlAndCommandLineAndNoOverride","org.springframework.boot.ReproTests.enableProfileViaApplicationProperties","org.springframework.boot.ReproTests.orderProfilesWithYaml","org.springframework.boot.ReproTests.activeProfilesWithYamlOnlyAndNoOverride","org.springframework.boot.ReproTests.orderActiveProfilesWithYamlOnly","org.springframework.boot.ReproTests.commandLineBeatsProfilesWithYamlAndNoOverride","org.springframework.boot.ReproTests.commandLineBeatsProfilesWithYaml","org.springframework.boot.ReproTests.activeProfilesWithYamlOnly","org.springframework.boot.ReproTests.reverseOrderOfProfilesWithYamlAndNoOverride","org.springframework.boot.ReproTests.activeProfilesWithYamlAndCommandLine","org.springframework.boot.web.servlet.support.ServletContextApplicationContextInitializerTests.applicationContextCanBeStoredInServletContext","org.springframework.boot.web.servlet.support.ServletContextApplicationContextInitializerTests.applicationContextIsNotStoredInServletContextByDefault","org.springframework.boot.web.servlet.support.ServletContextApplicationContextInitializerTests.servletContextIsSetOnTheApplicationContext","org.springframework.boot.ResourceBannerTests.renderWithColorsButDisabled","org.springframework.boot.ResourceBannerTests.renderWithoutVersions","org.springframework.boot.ResourceBannerTests.renderWithTitle","org.springframework.boot.ResourceBannerTests.renderFormattedVersions","org.springframework.boot.ResourceBannerTests.renderWithoutFormattedVersions","org.springframework.boot.ResourceBannerTests.renderVersions","org.springframework.boot.ResourceBannerTests.renderWithColors","org.springframework.boot.ResourceBannerTests.renderWithoutTitle","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.notAnError","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.unauthorizedWithErrorPath","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.responseIsNotCommittedDuringAsyncDispatch","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.subClassExceptionError","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.whenErrorIsSentAndWriterIsFlushedErrorIsSentToTheClient","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.responseIsNotCommittedWhenRequestIsAsync","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.statusError","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.responseUncommittedWithoutErrorPage","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.statusErrorWithCommittedResponse","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.errorMessageForRequestWithoutPathInfo","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.globalError","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.responseIsCommittedWhenExceptionIsThrownDuringAsyncDispatch","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.oncePerRequest","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.responseIsCommittedWhenRequestIsAsyncAndStatusIs400Plus","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.responseIsNotFlushedIfStatusIsLessThan400AndItHasAlreadyBeenCommitted","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.exceptionError","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.statusCode","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.responseIsCommittedWhenRequestIsAsyncAndExceptionIsThrown","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.nestedServletExceptionIsUnwrapped","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.responseCommitted","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.responseCommittedWhenFromClientAbortException","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.notAnErrorButNotOK","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.responseIsCommittedWhenStatusIs400PlusDuringAsyncDispatch","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.errorMessageForRequestWithPathInfo","org.springframework.boot.web.servlet.support.ErrorPageFilterTests.exceptionErrorWithCommittedResponse","org.springframework.boot.SimpleMainTests.mixedContext","org.springframework.boot.SimpleMainTests.configClassContext","org.springframework.boot.SimpleMainTests.basePackageScan","org.springframework.boot.SimpleMainTests.emptyApplicationContext","org.springframework.boot.SimpleMainTests.xmlContext","org.springframework.boot.web.servlet.support.ErrorPageFilterIntegrationTests.ok","org.springframework.boot.web.servlet.support.ErrorPageFilterIntegrationTests.created","org.springframework.boot.SpringApplicationExtensionsTests.Kotlin runApplication(arg1, arg2) top level function","org.springframework.boot.SpringApplicationExtensionsTests.Kotlin runApplication() top level function","org.springframework.boot.SpringApplicationExtensionsTests.Kotlin runApplication(arg1, arg2) top level function with a custom environment","org.springframework.boot.SpringApplicationExtensionsTests.Kotlin runApplication() top level function with a custom environment","org.springframework.boot.web.servlet.server.StaticResourceJarsTests.includeJarWithStaticResourcesWithUrlEncodedSpaces","org.springframework.boot.web.servlet.server.StaticResourceJarsTests.excludeJarWithoutStaticResources","org.springframework.boot.web.servlet.server.StaticResourceJarsTests.includeJarWithStaticResources","org.springframework.boot.web.servlet.server.StaticResourceJarsTests.uncPathsAreTolerated","org.springframework.boot.web.servlet.server.StaticResourceJarsTests.includeJarWithStaticResourcesWithPlusInItsPath","org.springframework.boot.SpringApplicationTests.customResourceLoaderFromConstructor","org.springframework.boot.SpringApplicationTests.specificReactiveApplicationContextClassDetectReactiveApplicationType","org.springframework.boot.SpringApplicationTests.failureInReadyEventListenerCloseApplicationContext","org.springframework.boot.SpringApplicationTests.addProfiles","org.springframework.boot.SpringApplicationTests.registerShutdownHookOff","org.springframework.boot.SpringApplicationTests.getApplicationArgumentsBean","org.springframework.boot.SpringApplicationTests.applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration","org.springframework.boot.SpringApplicationTests.specificWebApplicationContextClassDetectWebApplicationType","org.springframework.boot.SpringApplicationTests.sourcesMustNotBeNull","org.springframework.boot.SpringApplicationTests.beanDefinitionOverridingCanBeEnabled","org.springframework.boot.SpringApplicationTests.specificApplicationContextClass","org.springframework.boot.SpringApplicationTests.defaultCommandLineArgs","org.springframework.boot.SpringApplicationTests.wildcardSources","org.springframework.boot.SpringApplicationTests.headless","org.springframework.boot.SpringApplicationTests.environmentIsConvertedIfTypeDoesNotMatch","org.springframework.boot.SpringApplicationTests.triggersConfigFileApplicationListenerBeforeBinding","org.springframework.boot.SpringApplicationTests.webApplicationSwitchedOffInListener","org.springframework.boot.SpringApplicationTests.exitWithExplicitCode","org.springframework.boot.SpringApplicationTests.defaultApplicationContextForWeb","org.springframework.boot.SpringApplicationTests.bindsSystemPropertyToSpringApplication","org.springframework.boot.SpringApplicationTests.customBeanNameGeneratorWithNonWebApplication","org.springframework.boot.SpringApplicationTests.runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished","org.springframework.boot.SpringApplicationTests.headlessFalse","org.springframework.boot.SpringApplicationTests.contextRefreshedEventListener","org.springframework.boot.SpringApplicationTests.propertiesFileEnhancesEnvironment","org.springframework.boot.SpringApplicationTests.logsNoActiveProfiles","org.springframework.boot.SpringApplicationTests.contextUsesApplicationConversionService","org.springframework.boot.SpringApplicationTests.applicationRunningEventListener","org.springframework.boot.SpringApplicationTests.environmentForWeb","org.springframework.boot.SpringApplicationTests.addProfilesOrder","org.springframework.boot.SpringApplicationTests.commandLinePropertySourceEnhancesEnvironment","org.springframework.boot.SpringApplicationTests.customBanner","org.springframework.boot.SpringApplicationTests.registerShutdownHook","org.springframework.boot.SpringApplicationTests.commandLineRunnerFailureCausesApplicationFailedEventToBePublished","org.springframework.boot.SpringApplicationTests.applicationRunnerFailureCausesApplicationFailedEventToBePublished","org.springframework.boot.SpringApplicationTests.failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent","org.springframework.boot.SpringApplicationTests.run","org.springframework.boot.SpringApplicationTests.exit","org.springframework.boot.SpringApplicationTests.webApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment","org.springframework.boot.SpringApplicationTests.nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment","org.springframework.boot.SpringApplicationTests.beanDefinitionOverridingIsDisabledByDefault","org.springframework.boot.SpringApplicationTests.enableBannerInLogViaProperty","org.springframework.boot.SpringApplicationTests.commandLinePropertySource","org.springframework.boot.SpringApplicationTests.logsActiveProfiles","org.springframework.boot.SpringApplicationTests.defaultApplicationContext","org.springframework.boot.SpringApplicationTests.customEnvironment","org.springframework.boot.SpringApplicationTests.runComponents","org.springframework.boot.SpringApplicationTests.failureResultsInSingleStackTrace","org.springframework.boot.SpringApplicationTests.defaultApplicationContextForReactiveWeb","org.springframework.boot.SpringApplicationTests.eventsArePublishedInExpectedOrder","org.springframework.boot.SpringApplicationTests.environmentForReactiveWeb","org.springframework.boot.SpringApplicationTests.nonWebNorReactiveApplicationContextClassDetectNoneApplicationType","org.springframework.boot.SpringApplicationTests.customId","org.springframework.boot.SpringApplicationTests.setIgnoreBeanInfoPropertyByDefault","org.springframework.boot.SpringApplicationTests.emptyCommandLinePropertySourceNotAdded","org.springframework.boot.SpringApplicationTests.sourcesMustNotBeEmpty","org.springframework.boot.SpringApplicationTests.specificApplicationContextInitializer","org.springframework.boot.SpringApplicationTests.exitWithExplicitCodeFromException","org.springframework.boot.SpringApplicationTests.customResourceLoader","org.springframework.boot.SpringApplicationTests.exceptionFromRefreshIsHandledGracefully","org.springframework.boot.SpringApplicationTests.commandLineArgsApplyToSpringApplication","org.springframework.boot.SpringApplicationTests.customBannerWithProperties","org.springframework.boot.SpringApplicationTests.registerListener","org.springframework.boot.SpringApplicationTests.sourcesMustBeAccessible","org.springframework.boot.SpringApplicationTests.disableIgnoreBeanInfoProperty","org.springframework.boot.SpringApplicationTests.applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration","org.springframework.boot.SpringApplicationTests.imageBannerLoads","org.springframework.boot.SpringApplicationTests.imageBannerAndTextBanner","org.springframework.boot.SpringApplicationTests.disableCommandLinePropertySource","org.springframework.boot.SpringApplicationTests.contextWhenHasAddConversionServiceFalseUsesRegularConversionService","org.springframework.boot.SpringApplicationTests.headlessSystemPropertyTakesPrecedence","org.springframework.boot.SpringApplicationTests.reactiveApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment","org.springframework.boot.SpringApplicationTests.loadSources","org.springframework.boot.SpringApplicationTests.exitWithExplicitCodeFromMappedException","org.springframework.boot.SpringApplicationTests.applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration","org.springframework.boot.SpringApplicationTests.customBeanNameGenerator","org.springframework.boot.SpringApplicationTests.addProfilesOrderWithProperties","org.springframework.boot.SpringApplicationTests.runCommandLineRunnersAndApplicationRunners","org.springframework.boot.SpringApplicationTests.registerListenerWithCustomMulticaster","org.springframework.boot.SpringApplicationTests.applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration","org.springframework.boot.web.servlet.server.DocumentRootTests.explodedWarFileDocumentRootWhenRunningFromPackagedWar","org.springframework.boot.web.servlet.server.DocumentRootTests.codeSourceArchivePath","org.springframework.boot.web.servlet.server.DocumentRootTests.codeSourceArchivePathContainingSpaces","org.springframework.boot.web.servlet.server.DocumentRootTests.explodedWarFileDocumentRootWhenRunningFromExplodedWar","org.springframework.boot.SpringBootExceptionHandlerTests.uncaughtExceptionForwardsWrappedLogConfigurationErrorToParent","org.springframework.boot.SpringBootExceptionHandlerTests.uncaughtExceptionForwardsLogConfigurationErrorToParent","org.springframework.boot.SpringBootExceptionHandlerTests.uncaughtExceptionDoesNotForwardLoggedErrorToParent","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.unwrapServletException","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.extractMethodArgumentNotValidExceptionBindingResultErrors","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.nullMessage","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.includeTimeStamp","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.withExceptionAttribute","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.servletError","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.servletMessage","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.path","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.extractBindingResultErrors","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.trace","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.missingStatusCode","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.specificStatusCode","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.mvcError","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.getError","org.springframework.boot.web.servlet.error.DefaultErrorAttributesTests.noTrace","org.springframework.boot.StartUpLoggerTests.sourceClassIncluded","org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContextTests.createFromResource","org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContextTests.loadAndRefreshFromResource","org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContextTests.loadAndRefreshFromRelativeResourceLocation","org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContextTests.loadAndRefreshFromResourceLocation","org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContextTests.createFromResourceLocation","org.springframework.boot.web.servlet.context.XmlServletWebServerApplicationContextTests.createFromRelativeResourceLocation","org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrarTests.eventsFromOtherContextsAreIgnored","org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrarTests.environmentIsExposed","org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrarTests.validateReadyFlag","org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrarTests.shutdownApp","org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.tomcat","org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.undertow","org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.jetty","org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.advancedConfig","org.springframework.boot.ansi.AnsiColorsTests.getClosestWhenExactMatchShouldReturnAnsiColor","org.springframework.boot.ansi.AnsiColorsTests.getClosestWhenCloseShouldReturnAnsiColor","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.doesNotRegistersShutdownHook","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.servletContextInitializerBeans","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.unorderedServletContextInitializerBeans","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.cannotSecondRefresh","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.delegatingFilterProxyRegistrationBeansSkipsTargetBeanNames","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.localPortIsAvailable","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.tooManyWebServerFactories","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.postProcessWebServerFactory","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.servletAndFilterBeans","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.ServletWebServerInitializedEventPublished","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.servletContextAwareBeansAreInjected","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.startRegistrations","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.multipleServletBeans","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.servletContextListenerBeans","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.missingServletWebServerFactory","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.doesNotReplaceExistingScopes","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.servletContextInitializerBeansSkipsRegisteredServletsAndFilters","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.multipleServletBeansWithMainDispatcher","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.orderedBeanInsertedCorrectly","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.filterRegistrationBeansSkipsRegisteredFilters","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.stopOnClose","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.servletContextInitializerBeansDoesNotSkipServletsAndFilters","org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextTests.singleServletBean","org.springframework.boot.ansi.AnsiOutputTests.encoding","org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContextTests.scanAndRefresh","org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContextTests.sessionScopeAvailableToServlet","org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContextTests.multipleRegistersAndRefresh","org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContextTests.registerAndRefresh","org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContextTests.createAndInitializeCyclic","org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContextTests.sessionScopeAvailable","org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContextTests.createFromScan","org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContextTests.createAndInitializeWithParent","org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContextTests.createFromConfigClass","org.springframework.boot.ansi.AnsiPropertySourceTests.getAnsiBackground","org.springframework.boot.ansi.AnsiPropertySourceTests.encodeEnabled","org.springframework.boot.ansi.AnsiPropertySourceTests.getAnsi","org.springframework.boot.ansi.AnsiPropertySourceTests.encodeDisabled","org.springframework.boot.ansi.AnsiPropertySourceTests.getAnsiColor","org.springframework.boot.ansi.AnsiPropertySourceTests.getAnsiStyle","org.springframework.boot.ansi.AnsiPropertySourceTests.getMissing","org.springframework.boot.web.servlet.WebServletHandlerTests.servletWithCustomName","org.springframework.boot.web.servlet.WebServletHandlerTests.defaultServletConfiguration","org.springframework.boot.web.servlet.WebServletHandlerTests.asyncSupported","org.springframework.boot.web.servlet.WebServletHandlerTests.urlPatternsDeclaredTwice","org.springframework.boot.web.servlet.WebServletHandlerTests.initParameters","org.springframework.boot.web.servlet.WebServletHandlerTests.urlMappings","org.springframework.boot.web.servlet.WebServletHandlerTests.urlMappingsFromValue","org.springframework.boot.builder.SpringApplicationBuilderTests.initializersIncludeDefaults","org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextCreationThatIsRunDirectly","org.springframework.boot.builder.SpringApplicationBuilderTests.initializersCreatedOnce","org.springframework.boot.builder.SpringApplicationBuilderTests.propertiesAsMap","org.springframework.boot.builder.SpringApplicationBuilderTests.specificApplicationContextClass","org.springframework.boot.builder.SpringApplicationBuilderTests.propertiesAsProperties","org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstCreationWithProfileAndDefaultArgs","org.springframework.boot.builder.SpringApplicationBuilderTests.sourcesWithBoundSources","org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextIdentical","org.springframework.boot.builder.SpringApplicationBuilderTests.profileAndProperties","org.springframework.boot.builder.SpringApplicationBuilderTests.propertiesWithRepeatSeparator","org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstWithDifferentProfileAndExplicitEnvironment","org.springframework.boot.builder.SpringApplicationBuilderTests.contextWithClassLoader","org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstCreation","org.springframework.boot.builder.SpringApplicationBuilderTests.parentWithDifferentProfile","org.springframework.boot.builder.SpringApplicationBuilderTests.initializersCreatedOnceForChild","org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextWithClassLoader","org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextCreationWithChildShutdown","org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstWithDifferentProfile","org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextCreationThatIsBuiltThenRun","org.springframework.boot.web.servlet.WebListenerHandlerTests.listener","org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenHasVcapServicesShouldReturnCloudFoundry","org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenHasVcapApplicationShouldReturnCloudFoundry","org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenHasDynoShouldReturnHeroku","org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenNotInCloudShouldReturnNull","org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenHasHcLandscapeShouldReturnSap","org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenEnvironmentIsNullShouldReturnNull","org.springframework.boot.web.servlet.WebFilterHandlerTests.dispatcherTypes","org.springframework.boot.web.servlet.WebFilterHandlerTests.urlPatterns","org.springframework.boot.web.servlet.WebFilterHandlerTests.filterWithCustomName","org.springframework.boot.web.servlet.WebFilterHandlerTests.servletNames","org.springframework.boot.web.servlet.WebFilterHandlerTests.urlPatternsFromValue","org.springframework.boot.web.servlet.WebFilterHandlerTests.defaultFilterConfiguration","org.springframework.boot.web.servlet.WebFilterHandlerTests.asyncSupported","org.springframework.boot.web.servlet.WebFilterHandlerTests.urlPatternsDeclaredTwice","org.springframework.boot.web.servlet.WebFilterHandlerTests.initParameters","org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testServiceProperties","org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testApplicationUris","org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testUnparseableApplicationProperties","org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testApplicationProperties","org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testServicePropertiesWithoutNA","org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testNullApplicationProperties","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.setServletMustNotBeNull","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.startupWithDefaults","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.setMappingReplacesValue","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.specificName","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.withoutDefaultMappings","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.startupWithDoubleRegistration","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.addMappingMustNotBeNull","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.deducedName","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.modifyInitParameters","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.disable","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.createMappingMustNotBeNull","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.createServletMustNotBeNull","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.setMappingMustNotBeNull","org.springframework.boot.web.servlet.ServletRegistrationBeanTests.startupWithSpecifiedValues","org.springframework.boot.context.ApplicationPidFileWriterTests.overridePidFileWithSpring","org.springframework.boot.context.ApplicationPidFileWriterTests.throwWhenPidFileIsReadOnlyWithSpring","org.springframework.boot.context.ApplicationPidFileWriterTests.continueWhenPidFileIsReadOnly","org.springframework.boot.context.ApplicationPidFileWriterTests.withNoEnvironment","org.springframework.boot.context.ApplicationPidFileWriterTests.tryEnvironmentPreparedEvent","org.springframework.boot.context.ApplicationPidFileWriterTests.throwWhenPidFileIsReadOnly","org.springframework.boot.context.ApplicationPidFileWriterTests.overridePidFile","org.springframework.boot.context.ApplicationPidFileWriterTests.createPidFile","org.springframework.boot.context.ApplicationPidFileWriterTests.tryReadyEvent","org.springframework.boot.web.servlet.ServletListenerRegistrationBeanTests.startupWithDefaults","org.springframework.boot.web.servlet.ServletListenerRegistrationBeanTests.cannotRegisterUnsupportedType","org.springframework.boot.web.servlet.ServletListenerRegistrationBeanTests.disable","org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.noLogWithoutComponentScanAnnotation","org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.noLogIfHasBasePackages","org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.logWarningInOrgSpringPackage","org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.noLogIfInRealPackage","org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.noLogIfHasBasePackageClasses","org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.logWarningInDefaultPackage","org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.logWarningInDefaultPackageAndMetaAnnotation","org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.logWarningIfScanningProblemPackages","org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.noLogIfHasValue","org.springframework.boot.web.servlet.ServletContextInitializerBeansTests.servletThatImplementsServletContextInitializerIsOnlyRegisteredOnce","org.springframework.boot.web.servlet.ServletContextInitializerBeansTests.filterThatImplementsServletContextInitializerIsOnlyRegisteredOnce","org.springframework.boot.web.servlet.ServletContextInitializerBeansTests.looksForInitializerBeansOfSpecifiedType","org.springframework.boot.context.ContextIdApplicationContextInitializerTests.singleContextWithDefaultName","org.springframework.boot.context.ContextIdApplicationContextInitializerTests.complexHierarchy","org.springframework.boot.context.ContextIdApplicationContextInitializerTests.singleContextWithCustomName","org.springframework.boot.context.ContextIdApplicationContextInitializerTests.linearHierarchy","org.springframework.boot.context.ContextIdApplicationContextInitializerTests.contextWithParentWithNoContextIdFallsBackToDefaultId","org.springframework.boot.web.servlet.ServletComponentScanRegistrarTests.packagesConfiguredWithValueAsm","org.springframework.boot.web.servlet.ServletComponentScanRegistrarTests.packagesConfiguredWithBackPackages","org.springframework.boot.web.servlet.ServletComponentScanRegistrarTests.packagesFromMultipleAnnotationsAreMerged","org.springframework.boot.web.servlet.ServletComponentScanRegistrarTests.packagesConfiguredWithBasePackageClasses","org.springframework.boot.web.servlet.ServletComponentScanRegistrarTests.noBasePackageAndBasePackageAreCombinedCorrectly","org.springframework.boot.web.servlet.ServletComponentScanRegistrarTests.packagesConfiguredWithBothValueAndBasePackages","org.springframework.boot.web.servlet.ServletComponentScanRegistrarTests.packagesConfiguredWithValue","org.springframework.boot.web.servlet.ServletComponentScanRegistrarTests.withNoBasePackagesScanningUsesBasePackageOfAnnotatedClass","org.springframework.boot.web.servlet.ServletComponentScanRegistrarTests.basePackageAndNoBasePackageAreCombinedCorrectly","org.springframework.boot.context.FileEncodingApplicationListenerTests.testSunnyDayMandated","org.springframework.boot.context.FileEncodingApplicationListenerTests.testSunnyDayNothingMandated","org.springframework.boot.context.FileEncodingApplicationListenerTests.testIllegalState","org.springframework.boot.web.servlet.ServletComponentScanIntegrationTests.multipartConfigIsHonoured","org.springframework.boot.web.servlet.ServletComponentScanIntegrationTests.componentsAreRegistered","org.springframework.boot.context.TypeExcludeFilterTests.loadsTypeExcludeFilters","org.springframework.boot.web.servlet.MultipartConfigFactoryTests.createWithNegativeDataSizes","org.springframework.boot.web.servlet.MultipartConfigFactoryTests.createWithStringSizes","org.springframework.boot.web.servlet.MultipartConfigFactoryTests.create","org.springframework.boot.web.servlet.MultipartConfigFactoryTests.sensibleDefaults","org.springframework.boot.web.servlet.MultipartConfigFactoryTests.createWithDataSizes","org.springframework.boot.context.annotation.ConfigurationsTests.createShouldSortClasses","org.springframework.boot.context.annotation.ConfigurationsTests.createWhenClassesIsNullShouldThrowException","org.springframework.boot.context.annotation.ConfigurationsTests.getClassesShouldMergeByClassAndSort","org.springframework.boot.web.servlet.FilterRegistrationIntegrationTests.normalFiltersAreRegistered","org.springframework.boot.web.servlet.FilterRegistrationIntegrationTests.scopedTargetFiltersAreNotRegistered","org.springframework.boot.context.annotation.UserConfigurationsTests.ofShouldCreateUnorderedConfigurations","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.createServletRegistrationBeanMustNotBeNull","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.setFilterMustNotBeNull","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.setFilter","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.constructFilterMustNotBeNull","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.setUrlPatternMustNotBeNull","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.startupWithDefaults","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.addServletNameMustNotBeNull","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.setServletRegistrationBeanReplacesValue","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.specificName","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.addServletRegistrationBeanMustNotBeNull","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.setServletNameMustNotBeNull","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.deducedName","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.modifyInitParameters","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.addUrlPatternMustNotBeNull","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.withSpecificDispatcherTypesEnumSet","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.disable","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.withSpecificDispatcherTypes","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.setServletRegistrationBeanMustNotBeNull","org.springframework.boot.web.servlet.FilterRegistrationBeanTests.startupWithSpecifiedValues","org.springframework.boot.context.config.AnsiOutputApplicationListenerTests.enabled","org.springframework.boot.context.config.AnsiOutputApplicationListenerTests.disabled","org.springframework.boot.context.config.AnsiOutputApplicationListenerTests.disabledViaApplicationProperties","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.targetBeanNameMustNotBeEmpty","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.createServletRegistrationBeanMustNotBeNull","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.getFilterUsesDelegatingFilterProxy","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.targetBeanNameMustNotBeNull","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.nameDefaultsToTargetBeanName","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.initShouldNotCauseEarlyInitialization","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.setUrlPatternMustNotBeNull","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.startupWithDefaults","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.addServletNameMustNotBeNull","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.setServletRegistrationBeanReplacesValue","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.specificName","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.addServletRegistrationBeanMustNotBeNull","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.setServletNameMustNotBeNull","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.deducedName","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.modifyInitParameters","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.addUrlPatternMustNotBeNull","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.withSpecificDispatcherTypesEnumSet","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.disable","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.withSpecificDispatcherTypes","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.setServletRegistrationBeanMustNotBeNull","org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBeanTests.startupWithSpecifiedValues","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.customDefaultProfileAndActive","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadCustomResource","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.postProcessorsAreOrderedCorrectly","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.customDefaultProfileAndActiveFromFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResourceAsFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFiles","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfilesAndSwitchOneOff","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationMultipleLocationsAndName","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.activeProfilesCanBeConfiguredUsingPlaceholdersResolvedAgainstTheEnvironment","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.customDefaultProfile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotation","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.absoluteResourceDefaultsToFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileExpressionsNoMatch","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfiles","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.defaultPropertyAsFallback","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadDefaultPropertiesFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificNameAndProfileFromExistingSource","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.locationReplaceDefaultLocation","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsProfiles","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadDefaultYamlDocumentNotActivated","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilePropertiesUsedInPlaceholders","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.randomValue","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadProfileEmptySameAsNotSpecified","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationAndNonActiveProfile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsMultiProfiles","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResourceFromAdditionalLocation","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResource","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationWithName","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profileSubDocumentInDifferentProfileSpecificFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResourceDefaultsToFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profileSubDocumentInSameProfileSpecificFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadDefaultYamlDocument","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.systemPropertyWins","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.moreSpecificLocationTakesPrecedenceOverRoot","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertiesFromCustomPropertySourceLoaderShouldBeUsedWithSpecificResource","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.defaultPropertyAsFallbackDuringFileParsing","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileExpressionsAnd","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.includeLoop","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationInProfile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationWithPlaceholder","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.commandLineWins","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlNegatedProfiles","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesThenProfilePropertiesActivatedInSpringApplication","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertiesFromCustomPropertySourceLoaderShouldBeUsed","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlNegatedProfilesWithProfile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.additionalLocationTakesPrecedenceOverDefaultLocation","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileCanBeChanged","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadYamlFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentAndViaPropertyDuplicateEnvironmentWins","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profileCanBeIncludedWithoutAnyBeingActive","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.twoProfilesFromProperties","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesThenProfilePropertiesActivatedInFirst","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentAndViaProperty","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.additionalProfilesCanBeIncludedFromAnyPropertySource","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.multiValueSpringProfiles","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.localFileTakesPrecedenceOverClasspath","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationMultipleLocations","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesThenProfilePropertiesWithOverride","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfilesAndSwitchOneOffFromSpecificLocation","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoOfThreePropertiesFile","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlTwoProfiles","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.addBeforeDefaultProperties","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.activateProfileFromProfileSpecificProperties","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsMultiProfilesWithWhitespace","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentViaActiveAndIncludeProperty","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfilesUsingAdditionalLocation","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfiles","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.lastAdditionalLocationWins","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentAndViaPropertyDuplicate","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileExpressionsComplex","org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsMultiProfilesWhenListProvided","org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessorTests.postProcessAfterShouldCallInterfaceCustomizers","org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessorTests.postProcessAfterShouldCallLambdaCustomizers","org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessorTests.postProcessAfterWhenWebServerFactoryTwoShouldCallLambdaCustomizers","org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessorTests.postProcessAfterWhenWebServerFactoryOneShouldCallLambdaCustomizers","org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessorTests.setBeanFactoryWhenNotListableShouldThrowException","org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessorTests.postProcessAfterWhenWebServerFactoryOneShouldCallInterfaceCustomizers","org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessorTests.postProcessBeforeShouldReturnBean","org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessorTests.postProcessAfterShouldReturnBean","org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessorTests.postProcessAfterWhenWebServerFactoryTwoShouldCallInterfaceCustomizers","org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileCascading","org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileNegationDefaultProfile","org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileNegationWithProfileSpecificFile","org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileNegationOverrideLocalActiveProfiles","org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileNegationLocalActiveProfiles","org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileCascadingMultipleActiveProfilesViaPropertiesShouldPreserveOrder","org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileCascadingOverrideProfilesA","org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileCascadingOverrideProfilesB","org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileNegationWithActiveProfile","org.springframework.boot.web.server.MimeMappingsTests.addNew","org.springframework.boot.web.server.MimeMappingsTests.getAll","org.springframework.boot.web.server.MimeMappingsTests.remove","org.springframework.boot.web.server.MimeMappingsTests.defaultsCannotBeModified","org.springframework.boot.web.server.MimeMappingsTests.get","org.springframework.boot.web.server.MimeMappingsTests.addReplacesExisting","org.springframework.boot.web.server.MimeMappingsTests.createFromMap","org.springframework.boot.web.server.MimeMappingsTests.createFromExisting","org.springframework.boot.web.server.MimeMappingsTests.makeUnmodifiable","org.springframework.boot.web.server.MimeMappingsTests.getMissing","org.springframework.boot.web.server.MimeMappingsTests.iterate","org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.orderedInitialize","org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.genericNotSuitable","org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.notAnInitializerClass","org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.emptyInitializers","org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.noSuchInitializerClass","org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.noInitializers","org.springframework.boot.web.server.LocalServerPortTests.testLocalServerPortAnnotation","org.springframework.boot.context.config.DelegatingApplicationListenerTests.orderedInitialize","org.springframework.boot.context.config.DelegatingApplicationListenerTests.emptyInitializers","org.springframework.boot.context.config.DelegatingApplicationListenerTests.noInitializers","org.springframework.boot.web.server.CompressionTests.defaultCompressableMimeTypesMatchesTomcatsDefault","org.springframework.boot.context.logging.LoggingApplicationListenerIntegrationTests.loggingSystemRegisteredInTheContext","org.springframework.boot.context.logging.LoggingApplicationListenerIntegrationTests.loggingPerformedDuringChildApplicationStartIsNotLost","org.springframework.boot.web.reactive.result.view.MustacheViewTests.viewResolvesHandlebars","org.springframework.boot.context.logging.LoggingApplicationListenerTests.parseLevelsFails","org.springframework.boot.context.logging.LoggingApplicationListenerTests.logFilePropertiesCanReferenceSystemProperties","org.springframework.boot.context.logging.LoggingApplicationListenerTests.parseArgsDisabled","org.springframework.boot.context.logging.LoggingApplicationListenerTests.overrideConfigDoesNotExist","org.springframework.boot.context.logging.LoggingApplicationListenerTests.environmentPropertiesIgnoreUnresolvablePlaceholders","org.springframework.boot.context.logging.LoggingApplicationListenerTests.disableTraceArg","org.springframework.boot.context.logging.LoggingApplicationListenerTests.addLogFilePropertyWithDefault","org.springframework.boot.context.logging.LoggingApplicationListenerTests.overrideConfigLocation","org.springframework.boot.context.logging.LoggingApplicationListenerTests.parseLevels","org.springframework.boot.context.logging.LoggingApplicationListenerTests.tomcatNopLoggingConfigDoesNotCauseAFailure","org.springframework.boot.context.logging.LoggingApplicationListenerTests.parseLevelsNone","org.springframework.boot.context.logging.LoggingApplicationListenerTests.environmentPropertiesResolvePlaceholders","org.springframework.boot.context.logging.LoggingApplicationListenerTests.parseArgsDoesntReplace","org.springframework.boot.context.logging.LoggingApplicationListenerTests.defaultExceptionConversionWord","org.springframework.boot.context.logging.LoggingApplicationListenerTests.systemPropertiesAreSetForLoggingConfiguration","org.springframework.boot.context.logging.LoggingApplicationListenerTests.parseDebugArg","org.springframework.boot.context.logging.LoggingApplicationListenerTests.azureDefaultLoggingConfigDoesNotCauseAFailure","org.springframework.boot.context.logging.LoggingApplicationListenerTests.baseConfigLocation","org.springframework.boot.context.logging.LoggingApplicationListenerTests.loggingGroupsCanBeDefined","org.springframework.boot.context.logging.LoggingApplicationListenerTests.parseTraceArg","org.springframework.boot.context.logging.LoggingApplicationListenerTests.overrideExceptionConversionWord","org.springframework.boot.context.logging.LoggingApplicationListenerTests.parseLevelsCaseInsensitive","org.springframework.boot.context.logging.LoggingApplicationListenerTests.lowPriorityPropertySourceShouldNotOverrideRootLoggerConfig","org.springframework.boot.context.logging.LoggingApplicationListenerTests.addLogFileProperty","org.springframework.boot.context.logging.LoggingApplicationListenerTests.addLogPathProperty","org.springframework.boot.context.logging.LoggingApplicationListenerTests.applicationFailedEventCleansUpLoggingSystem","org.springframework.boot.context.logging.LoggingApplicationListenerTests.bridgeHandlerLifecycle","org.springframework.boot.context.logging.LoggingApplicationListenerTests.parseLevelsWithPlaceholder","org.springframework.boot.context.logging.LoggingApplicationListenerTests.loggingGroupsDefaultsAreApplied","org.springframework.boot.context.logging.LoggingApplicationListenerTests.overrideConfigBroken","org.springframework.boot.context.logging.LoggingApplicationListenerTests.shutdownHookIsNotRegisteredByDefault","org.springframework.boot.context.logging.LoggingApplicationListenerTests.parseLevelsMapsFalseToOff","org.springframework.boot.context.logging.LoggingApplicationListenerTests.closingContextCleansUpLoggingSystem","org.springframework.boot.context.logging.LoggingApplicationListenerTests.closingChildContextDoesNotCleanUpLoggingSystem","org.springframework.boot.context.logging.LoggingApplicationListenerTests.shutdownHookCanBeRegistered","org.springframework.boot.context.logging.LoggingApplicationListenerTests.disableDebugArg","org.springframework.boot.web.reactive.result.view.MustacheViewResolverTests.resolveExisting","org.springframework.boot.web.reactive.result.view.MustacheViewResolverTests.resolveNonExistent","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindNested","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingArrayShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPrefixedPropertiesAreReplacedOnBeanMethodShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenDotsInSystemEnvironmentPropertiesShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasPropertySourcesPlaceholderConfigurerShouldSupportRebindableConfigurationProperties","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenGenericConfigurationConverterIsNotQualifiedShouldNotConvert","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchOnNestedThatIsNotDirectlyAnnotatedShouldFail","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenFailsShouldIncludeAnnotationDetails","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingSystemPropertiesShouldBindNested","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToBeanWithGenerics","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithDefaultsInXmlShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingOver256ElementsShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchOnNestedThatIsNotDirectlyAnnotatedButIsValidShouldFail","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldSupportRebindableConfigurationProperties","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingCurrentDirectoryToFileShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasUnboundElementsFromSystemEnvironmentShouldNotThrowException","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenConfigurationPropertiesContainsMapWithPositiveAndNegativeIntegerKeys","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToMapKeyWithPeriodShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenConfigurationPropertiesIsAlsoValidatorShouldApplyValidator","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingSystemPropertiesShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingArrayFromYamlArrayShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasMultiplePropertySourcesPlaceholderConfigurerShouldLogWarning","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToValidatedImplementationOfInterfaceShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithoutAnnotationValueShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToCharArray","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingTwoBeansShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenOverridingPropertiesShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToMap","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingRelaxedFormsShouldBindToEnumSet","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasIgnoreUnknownFieldsFalseAndNoUnknownFieldsShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasConfigurationPropertiesValidatorShouldApplyValidator","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToMapWithNumericKey","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToListOfGenericClassShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToDataSizeShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingRelaxedFormsShouldBindToEnum","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingRelaxedFormsAndOverrideShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingOnlyParentContextShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldUseConfigurationConverter","org.springframework.boot.context.properties.ConfigurationPropertiesTests.customProtocolResolverIsInvoked","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasCustomPropertyEditorShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenOverridingPropertiesWithPlaceholderResolutionInEnvironmentShouldBindWithOverride","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldUseGenericConfigurationConverter","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasUnsupportedConfigurationPropertiesValidatorShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenTopLevelConverterNotFoundExceptionShouldNotFail","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithParentContextShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasPostConstructShouldTriggerPostConstructWithBoundBean","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWithPropertyPlaceholderShouldNotAlterPropertySourceOrder","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintMatchesShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPrefixedPropertiesDeclaredAsBeanShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingSystemPropertiesShouldBindToMap","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenMultiplePrefixedPropertiesDeclaredAsAnnotationValueShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToJavaTimeDuration","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldNotInitializeFactoryBeans","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPropertiesHaveAnnotationOnBaseClassShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasIgnoreUnknownFieldsFalseAndUnknownFieldsShouldFail","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenConfigurationConverterIsNotQualifiedShouldNotConvert","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasIgnoreInvalidFieldsTrueAndInvalidFieldsShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasPrefixShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.customProtocolResolver","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWithPropertyPlaceholderValueShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchShouldFail","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPrefixedPropertiesDeclaredAsAnnotationValueShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithDefaultsInJavaConfigurationShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchAndNotValidatedAnnotationShouldBind","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenSetterThrowsValidationExceptionShouldFail","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithoutAndAnnotationShouldFail","org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadValidatedOnBeanMethodAndJsr303ConstraintDoesNotMatchShouldFail","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.includeTimeStamp","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.notIncludeTrace","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.processResponseStatusExceptionWithNoNestedCause","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.includeException","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.includeTrace","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.extractBindingResultErrors","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.includePath","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.defaultStatusCode","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.processResponseStatusException","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.includeStatusCode","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.missingExceptionAttribute","org.springframework.boot.web.reactive.error.DefaultErrorAttributesTests.getError","org.springframework.boot.context.properties.PropertyMapperTests.whenHasTextWhenValueIsNullShouldNotMap","org.springframework.boot.context.properties.PropertyMapperTests.whenNonNullWhenSuppliedNullShouldNotMap","org.springframework.boot.context.properties.PropertyMapperTests.whenTrueWhenValueIsFalseShouldNotMap","org.springframework.boot.context.properties.PropertyMapperTests.whenInstanceOfWhenValueIsNotTargetTypeShouldNotMatch","org.springframework.boot.context.properties.PropertyMapperTests.fromValueAsIntShouldAdaptValue","org.springframework.boot.context.properties.PropertyMapperTests.toWhenConsumerIsNullShouldThrowException","org.springframework.boot.context.properties.PropertyMapperTests.fromNullValue","org.springframework.boot.context.properties.PropertyMapperTests.whenWhenCombinedWithAsUsesSourceValue","org.springframework.boot.context.properties.PropertyMapperTests.fromWhenSupplierIsNullShouldThrowException","org.springframework.boot.context.properties.PropertyMapperTests.asIntShouldAdaptSupplier","org.springframework.boot.context.properties.PropertyMapperTests.fromValue","org.springframework.boot.context.properties.PropertyMapperTests.fromValueAlwaysApplyingWhenNonNullShouldAlwaysApplyNonNullToSource","org.springframework.boot.context.properties.PropertyMapperTests.alwaysApplyingWhenNonNullShouldAlwaysApplyNonNullToSource","org.springframework.boot.context.properties.PropertyMapperTests.whenNonNullWhenSuppliedThrowsNullPointerExceptionShouldNotMap","org.springframework.boot.context.properties.PropertyMapperTests.whenInstanceOfWhenValueIsTargetTypeShouldMatch","org.springframework.boot.context.properties.PropertyMapperTests.whenWhenValueDoesNotMatchShouldNotMap","org.springframework.boot.context.properties.PropertyMapperTests.asShouldAdaptSupplier","org.springframework.boot.context.properties.PropertyMapperTests.whenFalseWhenValueIsTrueShouldNotMap","org.springframework.boot.context.properties.PropertyMapperTests.asWhenAdapterIsNullShouldThrowException","org.springframework.boot.context.properties.PropertyMapperTests.whenFalseWhenValueIsFalseShouldMap","org.springframework.boot.context.properties.PropertyMapperTests.toShouldMapFromSupplier","org.springframework.boot.context.properties.PropertyMapperTests.whenWhenValueMatchesShouldMap","org.springframework.boot.context.properties.PropertyMapperTests.whenEqualToWhenValueIsNotEqualShouldNotMatch","org.springframework.boot.context.properties.PropertyMapperTests.whenHasTextWhenValueHasTextShouldMap","org.springframework.boot.context.properties.PropertyMapperTests.whenTrueWhenValueIsTrueShouldMap","org.springframework.boot.context.properties.PropertyMapperTests.whenHasTextWhenValueIsEmptyShouldNotMap","org.springframework.boot.context.properties.PropertyMapperTests.whenEqualToWhenValueIsEqualShouldMatch","org.springframework.boot.web.reactive.context.GenericReactiveWebApplicationContextTests.getResourceByPath","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenStringShouldUsePropertyEditor","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNestedShouldReturnPopulatedArray","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenCommaListAndIndexedShouldOnlyUseFirst","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldBindCharArray","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenCommaListShouldReturnPopulatedArray","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldReturnPrimitiveArray","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldUsePropertyEditor","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenMultipleSourceShouldOnlyUseFirst","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenHasSpacesShouldTrim","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenIndexedAndCommaListShouldOnlyUseFirst","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToCollectionShouldTriggerOnSuccess","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNoValueShouldReturnUnbound","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNotInOrderShouldReturnPopulatedArray","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNonSequentialShouldThrowException","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldTriggerOnSuccess","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNestedListShouldReturnPopulatedArray","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNonIterableShouldReturnPopulatedArray","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenEmptyStringShouldReturnEmptyArray","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldReturnArray","org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenHasExistingCollectionShouldReplaceAllContents","org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContextTests.scanAndRefresh","org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContextTests.multipleRegistersAndRefresh","org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContextTests.registerAndRefresh","org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContextTests.createFromScan","org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContextTests.httpHandlerInitialization","org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContextTests.createFromConfigClass","org.springframework.boot.context.properties.bind.BackCompatibilityBinderIntegrationTests.bindWhenBindingCamelCaseToEnvironmentWithExtractUnderscore","org.springframework.boot.context.properties.bind.BackCompatibilityBinderIntegrationTests.bindWhenUsingSystemEnvironmentToOverride","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslRestrictedProtocolsRSATLS12Success","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslRestrictedProtocolsEmptyCipherFailure","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.basicSslClasspathKeyStore","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.addNullAddBuilderCustomizersThrows","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.errorPage404","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslRestrictedProtocolsECDHETLS1Failure","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslRestrictedProtocolsECDHESuccess","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.addNullAddDeploymentInfoCustomizersThrows","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.accessLogCanBeCustomized","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.eachFactoryUsesADiscreteServletContainer","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.accessLogCanBeEnabled","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.useForwardHeaders","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.setNullDeploymentInfoCustomizersThrows","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.setNullBuilderCustomizersThrows","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.defaultContextPath","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.builderCustomizers","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslRestrictedProtocolsRSATLS11Failure","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.deploymentInfo","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.serverHeaderIsDisabledByDefault","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.errorPageFromPutRequest","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.getValidSessionStoreWhenSessionStoreNotSet","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslSessionTracking","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.jspServletIsNotInDevelopmentModeByDefault","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sessionCookieConfiguration","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.contextRootPathMustNotBeSlash","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.documentRoot","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.mimeType","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.basicSslFromFileSystem","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.startBlocksUntilReadyToServe","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.specificPort","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.faultyFilterCausesStartFailure","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.compressionOfResponseToGetRequest","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.startCalledTwice","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithoutClientCertificate","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.customServerHeader","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.startServletAndFilter","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sessionConfiguration","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.emptyServerWhenPortIsMinusOne","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.persistSession","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.stopCalledTwice","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.getValidSessionStoreWhenSessionStoreReferencesFile","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.serverHeaderCanBeCustomizedWhenUsingSsl","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.contextPathMustStartWithSlash","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.jspServletInitParameters","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.persistSessionInSpecificSessionStoreDir","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslGetScheme","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.errorPage","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.contextPathIsLoggedOnStartup","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslWithCustomSslStoreProvider","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.servletContextListenerContextDestroyedIsCalledWhenContainerIsStopped","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.compressionWithoutContentSizeHeader","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.contextPathMustNotEndWithSlash","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.stopServlet","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.serverHeaderIsDisabledByDefaultWhenUsingSsl","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.mimeMappingsAreCorrectlyConfigured","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.multipleConfigurations","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.loadOnStartAfterContextIsInitialized","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslNeedsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslDisabled","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.basicSslFromClassPath","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.compressionOfResponseToPostRequest","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslKeyAlias","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.rootServletContextResource","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.portClashOfPrimaryConnectorResultsInPortInUseException","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.defaultSessionTimeout","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.noCompressionForSmallResponse","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.disableJspServletRegistration","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.localeCharsetMappingsAreConfigured","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.pkcs12KeyStoreAndTrustStore","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.portClashOfSecondaryConnectorResultsInPortInUseException","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.cannotReadClassPathFiles","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.startServlet","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.sslNeedsClientAuthenticationFailsWithoutClientCertificate","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.specificContextRoot","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.getValidSessionStoreWhenSessionStoreIsRelative","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.noCompressionForUserAgent","org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactoryTests.noCompressionForMimeType","org.springframework.boot.context.properties.bind.BeanPropertyNameTests.toDashedCaseShouldConvertValue","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.useForwardedHeaders","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.accessLogCanBeCustomized","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.accessLogCanBeEnabled","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.setNullBuilderCustomizersShouldThrowException","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.addNullBuilderCustomizersShouldThrowException","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.builderCustomizersShouldBeInvoked","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.basicSslFromFileSystem","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.specificPort","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.compressionOfResponseToGetRequest","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithoutClientCertificate","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.sslNeedsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.basicSslFromClassPath","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.compressionOfResponseToPostRequest","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.noCompressionForSmallResponse","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.sslNeedsClientAuthenticationFailsWithoutClientCertificate","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.noCompressionForUserAgent","org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactoryTests.noCompressionForMimeType","org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasEditorByConventionShouldReturnTrue","org.springframework.boot.context.properties.bind.BindConverterTests.createWhenConversionServiceIsNullShouldThrowException","org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasDefaultEditorShouldReturnTrue","org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenNotPropertyEditorAndConversionServiceCannotConvertShouldThrowException","org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasEditorByConventionShouldConvert","org.springframework.boot.context.properties.bind.BindConverterTests.fallsBackToApplicationConversionService","org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasDefaultEditorShouldConvert","org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasCustomEditorShouldReturnTrue","org.springframework.boot.context.properties.bind.BindConverterTests.createWhenPropertyEditorInitializerIsNotNullShouldUseToInitialize","org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasEditorForArrayElementShouldConvert","org.springframework.boot.context.properties.bind.BindConverterTests.createWhenPropertyEditorInitializerIsNullShouldCreate","org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenNotPropertyEditorAndConversionServiceCannotConvertShouldReturnFalse","org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenConversionServiceCanConvertShouldConvert","org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasEditorForCollectionElementShouldReturnTrue","org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenConversionServiceCanConvertShouldReturnTrue","org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenConvertingToFileShouldExcludeFileEditor","org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasCustomEditorShouldConvert","org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasEditorForArrayElementShouldReturnTrue","org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasEditorForCollectionElementShouldConvert","org.springframework.boot.web.embedded.undertow.SslBuilderCustomizerTests.getKeyManagersWhenAliasIsNullShouldNotDecorate","org.springframework.boot.context.properties.bind.BindResultTests.getWhenHasValueShouldReturnValue","org.springframework.boot.context.properties.bind.BindResultTests.mapWhenHasValueShouldCallMapper","org.springframework.boot.context.properties.bind.BindResultTests.ifBoundWhenHasNoValueShouldNotCallConsumer","org.springframework.boot.context.properties.bind.BindResultTests.orElseWhenHasValueNoShouldReturnOther","org.springframework.boot.context.properties.bind.BindResultTests.orElseThrowWhenHasNoValueShouldThrowException","org.springframework.boot.context.properties.bind.BindResultTests.ifBoundWhenConsumerIsNullShouldThrowException","org.springframework.boot.context.properties.bind.BindResultTests.ofWhenValueIsNullShouldReturnUnbound","org.springframework.boot.context.properties.bind.BindResultTests.orElseThrowWhenHasValueShouldReturnValue","org.springframework.boot.context.properties.bind.BindResultTests.orElseCreateWhenHasValueShouldReturnValue","org.springframework.boot.context.properties.bind.BindResultTests.orElseWhenHasValueShouldReturnValue","org.springframework.boot.context.properties.bind.BindResultTests.mapWhenHasNoValueShouldNotCallMapper","org.springframework.boot.context.properties.bind.BindResultTests.ofWhenHasValueShouldReturnBoundResultOfValue","org.springframework.boot.context.properties.bind.BindResultTests.ifBoundWhenHasValueShouldCallConsumer","org.springframework.boot.context.properties.bind.BindResultTests.hashCodeAndEquals","org.springframework.boot.context.properties.bind.BindResultTests.orElseCreateWhenTypeIsNullShouldThrowException","org.springframework.boot.context.properties.bind.BindResultTests.isBoundWhenHasNoValueShouldFalse","org.springframework.boot.context.properties.bind.BindResultTests.orElseCreateWhenHasValueNoShouldReturnCreatedValue","org.springframework.boot.context.properties.bind.BindResultTests.orElseGetWhenHasValueShouldReturnValue","org.springframework.boot.context.properties.bind.BindResultTests.getWhenHasNoValueShouldThrowException","org.springframework.boot.context.properties.bind.BindResultTests.mapWhenMapperIsNullShouldThrowException","org.springframework.boot.context.properties.bind.BindResultTests.isBoundWhenHasValueShouldReturnTrue","org.springframework.boot.context.properties.bind.BindResultTests.orElseGetWhenHasValueNoShouldReturnOther","org.springframework.boot.web.embedded.undertow.JarResourceManagerTests.resourceIsFoundInJarFileWithoutLeadingSlash","org.springframework.boot.web.embedded.undertow.JarResourceManagerTests.rootPathIsHandledCorrectly","org.springframework.boot.web.embedded.undertow.JarResourceManagerTests.resourceIsFoundInJarFile","org.springframework.boot.web.embedded.undertow.JarResourceManagerTests.emptyPathIsHandledCorrectly","org.springframework.boot.context.properties.bind.BindableTests.withAnnotationsShouldSetAnnotations","org.springframework.boot.context.properties.bind.BindableTests.ofTypeWhenExistingValueIsNotInstanceOfTypeShouldThrowException","org.springframework.boot.context.properties.bind.BindableTests.ofClassWithExistingValueShouldSetTypeAndExistingValue","org.springframework.boot.context.properties.bind.BindableTests.ofClassWhenTypeIsNullShouldThrowException","org.springframework.boot.context.properties.bind.BindableTests.ofTypeShouldSetType","org.springframework.boot.context.properties.bind.BindableTests.getAnnotationsShouldReturnEmptyArray","org.springframework.boot.context.properties.bind.BindableTests.toStringShouldShowDetails","org.springframework.boot.context.properties.bind.BindableTests.getAnnotationWhenNoMatchShouldReturnNull","org.springframework.boot.context.properties.bind.BindableTests.ofClassShouldSetType","org.springframework.boot.context.properties.bind.BindableTests.equalsAndHashCode","org.springframework.boot.context.properties.bind.BindableTests.ofTypeWhenTypeIsNullShouldThrowException","org.springframework.boot.context.properties.bind.BindableTests.getBoxedTypeWhenPrimitiveArrayShouldReturnBoxedType","org.springframework.boot.context.properties.bind.BindableTests.ofInstanceShouldSetTypeAndExistingValue","org.springframework.boot.context.properties.bind.BindableTests.getBoxedTypeWhenNotBoxedShouldReturnType","org.springframework.boot.context.properties.bind.BindableTests.getBoxedTypeWhenPrimitiveShouldReturnBoxedType","org.springframework.boot.context.properties.bind.BindableTests.ofTypeWhenPrimitiveWithExistingValueWrapperShouldNotThrowException","org.springframework.boot.context.properties.bind.BindableTests.ofTypeWithExistingValueShouldSetTypeAndExistingValue","org.springframework.boot.context.properties.bind.BindableTests.getAnnotationWhenMatchShouldReturnAnnotation","org.springframework.boot.web.embedded.undertow.FileSessionPersistenceTests.dontRestoreExpired","org.springframework.boot.web.embedded.undertow.FileSessionPersistenceTests.deleteFileOnClear","org.springframework.boot.web.embedded.undertow.FileSessionPersistenceTests.persistAndLoad","org.springframework.boot.web.embedded.undertow.FileSessionPersistenceTests.loadsNullForMissingFile","org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanWhenHasPropertyWithSameNameShouldStillBind","org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldTriggerOnSuccess","org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanShouldTriggerOnSuccess","org.springframework.boot.context.properties.bind.BinderTests.bindToValueWithCustomPropertyEditorShouldReturnConvertedValue","org.springframework.boot.context.properties.bind.BinderTests.bindToValidatedBeanWithResourceAndNonEnumerablePropertySource","org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanWhenNonIterableShouldReturnPopulatedBean","org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldReturnPropertyValueFromSecondSource","org.springframework.boot.context.properties.bind.BinderTests.bindWithEmptyPrefixShouldIgnorePropertiesWithEmptyName","org.springframework.boot.context.properties.bind.BinderTests.bindWhenHasMalformedDateShouldThrowException","org.springframework.boot.context.properties.bind.BinderTests.bindWhenHasAnnotationsShouldChangeConvertedValue","org.springframework.boot.context.properties.bind.BinderTests.bindToValueWithMissingPlaceholderShouldResolveToValueWithPlaceholder","org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldReturnPropertyValue","org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanShouldReturnPopulatedBean","org.springframework.boot.context.properties.bind.BinderTests.bindWhenNameIsNullShouldThrowException","org.springframework.boot.context.properties.bind.BinderTests.bindToBeanWithCycle","org.springframework.boot.context.properties.bind.BinderTests.createWhenSourcesIsNullShouldThrowException","org.springframework.boot.context.properties.bind.BinderTests.bindToValueWhenPropertyIsMissingShouldReturnUnbound","org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldReturnConvertedPropertyValue","org.springframework.boot.context.properties.bind.BinderTests.bindToBeanWithUnresolvableGenerics","org.springframework.boot.context.properties.bind.BinderTests.bindWhenTargetIsNullShouldThrowException","org.springframework.boot.context.properties.bind.BinderTests.bindToValueWhenMultipleCandidatesShouldReturnFirst","org.springframework.boot.context.properties.bind.BinderTests.bindToValueWithPlaceholdersShouldResolve","org.springframework.boot.context.properties.bind.BinderTests.bindExceptionWhenBeanBindingFailsShouldHaveNullConfigurationProperty","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.customTomcatHttpOnlyCookie","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.stopCalledWithoutStart","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.jndiLookupsCanBePerformedDuringApplicationContextRefresh","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.tomcatEngineNames","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.tomcatConnectorCustomizers","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.addNullConnectorCustomizersThrows","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sessionTimeoutInMins","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.addNullAdditionalConnectorThrows","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.noSessionTimeout","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.disableDoesNotSaveSessionFiles","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.tomcatCustomizers","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.setNullTomcatContextCustomizersThrows","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.contextIsAddedToHostBeforeCustomizersAreCalled","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.setNullTomcatConnectorCustomizersThrows","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.valve","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.defaultLocaleCharsetMappingsAreOverridden","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.primaryConnectorPortClashThrowsIllegalStateException","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.defaultTomcatListeners","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.uriEncoding","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sessionTimeout","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.addNullContextCustomizersThrows","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.useForwardHeaders","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sessionIdGeneratorIsConfiguredWithAttributesFromTheManager","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.defaultUriEncoding","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.tldSkipPatternsShouldBeAppliedToContextJarScanner","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.tomcatAdditionalConnectors","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.startupFailureDoesNotResultInUnstoppedThreadsBeingReported","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.tomcatListeners","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.serverHeaderIsDisabledByDefault","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.errorPageFromPutRequest","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.getValidSessionStoreWhenSessionStoreNotSet","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sslSessionTracking","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.jspServletIsNotInDevelopmentModeByDefault","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sessionCookieConfiguration","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.contextRootPathMustNotBeSlash","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.documentRoot","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.mimeType","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.basicSslFromFileSystem","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.startBlocksUntilReadyToServe","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.specificPort","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.faultyFilterCausesStartFailure","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.compressionOfResponseToGetRequest","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.startCalledTwice","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithoutClientCertificate","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.customServerHeader","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.startServletAndFilter","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sessionConfiguration","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.emptyServerWhenPortIsMinusOne","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.persistSession","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.stopCalledTwice","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.getValidSessionStoreWhenSessionStoreReferencesFile","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.serverHeaderCanBeCustomizedWhenUsingSsl","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.contextPathMustStartWithSlash","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.jspServletInitParameters","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.persistSessionInSpecificSessionStoreDir","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sslGetScheme","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.errorPage","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.contextPathIsLoggedOnStartup","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sslWithCustomSslStoreProvider","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.servletContextListenerContextDestroyedIsCalledWhenContainerIsStopped","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.compressionWithoutContentSizeHeader","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.contextPathMustNotEndWithSlash","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.stopServlet","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.serverHeaderIsDisabledByDefaultWhenUsingSsl","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.mimeMappingsAreCorrectlyConfigured","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.multipleConfigurations","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.loadOnStartAfterContextIsInitialized","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sslNeedsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sslDisabled","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.basicSslFromClassPath","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.compressionOfResponseToPostRequest","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sslKeyAlias","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.rootServletContextResource","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.portClashOfPrimaryConnectorResultsInPortInUseException","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.defaultSessionTimeout","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.noCompressionForSmallResponse","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.disableJspServletRegistration","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.localeCharsetMappingsAreConfigured","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.pkcs12KeyStoreAndTrustStore","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.portClashOfSecondaryConnectorResultsInPortInUseException","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.cannotReadClassPathFiles","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.startServlet","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.sslNeedsClientAuthenticationFailsWithoutClientCertificate","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.specificContextRoot","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.getValidSessionStoreWhenSessionStoreIsRelative","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.noCompressionForUserAgent","org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactoryTests.noCompressionForMimeType","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNonSequentialShouldThrowException","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenIndexedAndCommaListShouldOnlyUseFirst","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWithNoDefaultConstructor","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToImmutableCollectionShouldReturnPopulatedCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWithDefaultConstructor","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToListShouldAllowDuplicateValues","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldReturnPopulatedCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithExceptionInGetterForExistingValue","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldAlsoCallSetterIfPresent","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldRespectCollectionType","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToNonScalarCollectionShouldReturnPopulatedCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenCommaListWithPlaceholdersShouldReturnPopulatedCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithNestedCollectionShouldPopulateCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToSetShouldNotAllowDuplicateValues","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToSetShouldReturnPopulatedCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithNestedCollectionAndNonIterableSourceShouldNotFail","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNoValueShouldReturnUnbound","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithClonedArray","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNestedShouldReturnPopulatedCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenMultipleSourceShouldOnlyUseFirst","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNotInOrderShouldReturnPopulatedCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToNestedCollectionWhenEmptyStringShouldReturnEmptyCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenCommaListShouldReturnPopulatedCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenItemContainsCommasShouldReturnPopulatedCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenCommaListAndIndexedShouldOnlyUseFirst","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldUsePropertyEditor","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenEmptyStringShouldReturnEmptyCollection","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToNonScalarCollectionWhenNonSequentialShouldThrowException","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenStringShouldUsePropertyEditor","org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNonIterableShouldReturnPopulatedCollection","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.useForwardedHeaders","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.tomcatCustomizers","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.contextIsAddedToHostBeforeCustomizersAreCalled","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.setNullConnectorCustomizersShouldThrowException","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.defaultTomcatListeners","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.tomcatConnectorCustomizersShouldBeInvoked","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.addNullAddConnectorCustomizersShouldThrowException","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.tomcatListeners","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.basicSslFromFileSystem","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.specificPort","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.compressionOfResponseToGetRequest","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithoutClientCertificate","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.sslNeedsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.basicSslFromClassPath","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.compressionOfResponseToPostRequest","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.noCompressionForSmallResponse","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.sslNeedsClientAuthenticationFailsWithoutClientCertificate","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.noCompressionForUserAgent","org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactoryTests.noCompressionForMimeType","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToExistingInstanceShouldLeaveDefaults","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenPropertyCannotBeConvertedShouldThrowException","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToMap","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToSet","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenPropertiesMissingShouldReturnUnbound","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoPrefixShouldCreateBoundBean","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToCollection","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWhenNoNestedShouldLeaveNestedAsNull","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldIgnoreInvalidAccessors","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWithNoPropertiesShouldReturnUnbound","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindWithAnnotations","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindHierarchy","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindNested","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindNested","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenNoDefaultConstructorShouldReturnUnbound","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToList","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToList","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenIterableShouldBindNestedBasedOnInstance","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterAndImmutableShouldThrowException","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenNotIterableShouldNotBindNestedBasedOnInstance","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWhenNoDefaultConstructorShouldBind","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldCreateBoundBean","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWithSelfReferenceShouldBind","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToCollection","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldLeaveDefaults","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWithExistingValueShouldReturnUnbound","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToListIfUnboundElementsPresentShouldThrowException","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceShouldBindToInstance","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldIgnoreStaticAccessors","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldNotInvokeExtraMethods","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenPropertyCannotBeConvertedAndIgnoreErrorsShouldNotSetValue","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenMismatchedGetSetShouldBind","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindWhenValueIsConvertedWithPropertyEditorShouldBind","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToMap","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToSet","org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToCollectionWithDelimiter","org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoaderTests.getResourceFindsResourceFromParentClassLoader","org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoaderTests.getResourcesOnlyFindsResourcesFromParentClassLoader","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenHasExistingMapShouldReplaceOnlyNewContents","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldConvertKey","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNumberKeyAndCommaSeparated","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMultipleInSameSourceCandidateShouldBindFirst","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithCustomConverter","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldTriggerOnSuccess","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringCollectionWithDotKeysShouldPreserveDot","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMultipleCandidateShouldBindFirst","org.springframework.boot.context.properties.bind.MapBinderTests.bindToBeanWithExceptionInGetterForExistingValue","org.springframework.boot.context.properties.bind.MapBinderTests.nestedMapsShouldNotBindToNull","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldNotTreatClassWithStringConstructorAsScalar","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapNonScalarCollectionWithDotKeysShouldBind","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenEmptyRootNameShouldBindMap","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithPropertyEditorForValue","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNumberKeyAndIndexed","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithCustomConverterAndChildElements","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldRespectMapType","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMapValueIsObjectAndNoRootShouldBindNestedMapValue","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringArrayWithDotKeysShouldPreserveDot","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBeGreedyForScalars","org.springframework.boot.context.properties.bind.MapBinderTests.bindToImmutableMapShouldReturnPopulatedMap","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMapValueIsObjectShouldBindNestedMapValue","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBeGreedyForStrings","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBindNestedMapValue","org.springframework.boot.context.properties.bind.MapBinderTests.bindToListOfMaps","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenNoValueShouldReturnUnbound","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithDefaultConstructor","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNoConverterForValue","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapNonScalarCollectionShouldPopulateMap","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithEmptyPrefix","org.springframework.boot.context.properties.bind.MapBinderTests.bindToPropertiesShouldBeEquivalentToMapOfStringString","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNoDefaultConstructor","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringArrayWithDotKeysAndCommaSeparatedShouldPreserveDot","org.springframework.boot.context.properties.bind.MapBinderTests.bindingWithSquareBracketMap","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringArrayShouldTriggerOnSuccess","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithPlaceholdersShouldBeGreedyForScalars","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldConvertMapValue","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNoPropertiesShouldReturnUnbound","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldReturnPopulatedMap","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBindToMapValue","org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithPropertyEditorForKey","org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizerTests.customizeWhenSslStoreProviderPresentShouldIgnorePasswordFromSsl","org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizerTests.customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore","org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizerTests.sslEnabledProtocolsConfiguration","org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizerTests.customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore","org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizerTests.sslCiphersConfiguration","org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizerTests.sslEnabledMultipleProtocolsConfiguration","org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolverTests.resolveIfPlaceholderPresentResolvesProperty","org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolverTests.resolveIfPlaceholderAbsentAndNoDefaultUsesPlaceholder","org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolverTests.placeholderResolverIfEnvironmentNullShouldThrowException","org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolverTests.resolveIfPlaceholderAbsentUsesDefault","org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolverTests.resolveIfHelperPresentShouldUseIt","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.useForwardedHeaders","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.exceptionIsThrownWhenPortIsAlreadyInUse","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.nettyCustomizers","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.basicSslFromFileSystem","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.specificPort","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.compressionOfResponseToGetRequest","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithoutClientCertificate","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.sslNeedsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.basicSslFromClassPath","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.compressionOfResponseToPostRequest","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.noCompressionForSmallResponse","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.sslNeedsClientAuthenticationFailsWithoutClientCertificate","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.noCompressionForUserAgent","org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactoryTests.noCompressionForMimeType","org.springframework.boot.context.properties.bind.handler.IgnoreErrorsBindHandlerTests.bindWhenIgnoringErrorsShouldBind","org.springframework.boot.context.properties.bind.handler.IgnoreErrorsBindHandlerTests.bindWhenNotIgnoringErrorsShouldFail","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.jettyCustomizations","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.stopCalledWithoutStart","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.wrappedHandlers","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslEnabledProtocolsConfiguration","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.basicSslClasspathKeyStore","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.faultyListenerCausesStartFailure","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.jettyConfigurations","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sessionTimeoutInMins","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.customThreadPool","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.defaultThreadPool","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.specificIPAddressNotReverseResolved","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.startFailsWhenThreadPoolIsTooSmall","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslCiphersConfiguration","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sessionTimeout","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.specificIPAddressWithSslIsNotReverseResolved","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.useForwardHeaders","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslEnabledMultiProtocolsConfiguration","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.serverHeaderIsDisabledByDefault","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.errorPageFromPutRequest","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.getValidSessionStoreWhenSessionStoreNotSet","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslSessionTracking","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.jspServletIsNotInDevelopmentModeByDefault","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sessionCookieConfiguration","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.contextRootPathMustNotBeSlash","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.documentRoot","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.mimeType","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.basicSslFromFileSystem","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.startBlocksUntilReadyToServe","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.specificPort","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.faultyFilterCausesStartFailure","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.compressionOfResponseToGetRequest","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.startCalledTwice","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithoutClientCertificate","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.customServerHeader","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.startServletAndFilter","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sessionConfiguration","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.emptyServerWhenPortIsMinusOne","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.persistSession","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.stopCalledTwice","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.getValidSessionStoreWhenSessionStoreReferencesFile","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.serverHeaderCanBeCustomizedWhenUsingSsl","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.contextPathMustStartWithSlash","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.jspServletInitParameters","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.persistSessionInSpecificSessionStoreDir","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslGetScheme","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.errorPage","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.contextPathIsLoggedOnStartup","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslWithCustomSslStoreProvider","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.servletContextListenerContextDestroyedIsCalledWhenContainerIsStopped","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.compressionWithoutContentSizeHeader","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.contextPathMustNotEndWithSlash","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.stopServlet","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.serverHeaderIsDisabledByDefaultWhenUsingSsl","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.mimeMappingsAreCorrectlyConfigured","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.multipleConfigurations","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.loadOnStartAfterContextIsInitialized","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslNeedsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslDisabled","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.basicSslFromClassPath","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.compressionOfResponseToPostRequest","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslKeyAlias","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.rootServletContextResource","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.portClashOfPrimaryConnectorResultsInPortInUseException","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.defaultSessionTimeout","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.noCompressionForSmallResponse","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.disableJspServletRegistration","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.localeCharsetMappingsAreConfigured","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.pkcs12KeyStoreAndTrustStore","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.portClashOfSecondaryConnectorResultsInPortInUseException","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.cannotReadClassPathFiles","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.startServlet","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.sslNeedsClientAuthenticationFailsWithoutClientCertificate","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.specificContextRoot","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.getValidSessionStoreWhenSessionStoreIsRelative","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.noCompressionForUserAgent","org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactoryTests.noCompressionForMimeType","org.springframework.boot.context.properties.bind.handler.IgnoreTopLevelConverterNotFoundBindHandlerTests.bindWhenHandlerNotPresentShouldFail","org.springframework.boot.context.properties.bind.handler.IgnoreTopLevelConverterNotFoundBindHandlerTests.bindWhenExceptionNotIgnorableShouldFail","org.springframework.boot.context.properties.bind.handler.IgnoreTopLevelConverterNotFoundBindHandlerTests.bindWhenTopLevelContextAndExceptionIgnorableShouldNotFail","org.springframework.boot.context.properties.bind.handler.IgnoreTopLevelConverterNotFoundBindHandlerTests.bindWhenExceptionInNestedContextShouldFail","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.useForwardedHeaders","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.specificIPAddressNotReverseResolved","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.addNullServerCustomizersShouldThrowException","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.setNullServerCustomizersShouldThrowException","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.jettyCustomizersShouldBeInvoked","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.basicSslFromFileSystem","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.specificPort","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.compressionOfResponseToGetRequest","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.sslWantsClientAuthenticationSucceedsWithoutClientCertificate","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.sslNeedsClientAuthenticationSucceedsWithClientCertificate","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.basicSslFromClassPath","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.compressionOfResponseToPostRequest","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.noCompressionForSmallResponse","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.sslNeedsClientAuthenticationFailsWithoutClientCertificate","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.noCompressionForUserAgent","org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactoryTests.noCompressionForMimeType","org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandlerTests.bindWhenNotUsingNoUnboundElementsHandlerShouldBind","org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandlerTests.bindWhenUsingNoUnboundElementsHandlerThrowException","org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandlerTests.bindWhenUsingNoUnboundElementsHandlerShouldBindIfPrefixDifferent","org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandlerTests.bindWhenUsingNoUnboundElementsHandlerShouldBind","org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandlerTests.bindWhenUsingNoUnboundElementsHandlerShouldBindIfUnboundSystemProperties","org.springframework.boot.web.context.WebServerPortFileWriterTest.overridePortFileWithExplicitFile","org.springframework.boot.web.context.WebServerPortFileWriterTest.createUpperCaseManagementPortFile","org.springframework.boot.web.context.WebServerPortFileWriterTest.overridePortFileWithDefault","org.springframework.boot.web.context.WebServerPortFileWriterTest.createPortFile","org.springframework.boot.web.context.WebServerPortFileWriterTest.createManagementPortFile","org.springframework.boot.context.properties.bind.test.PackagePrivateBeanBindingTests.bindToPackagePrivateClassShouldBindToInstance","org.springframework.boot.web.client.RootUriTemplateHandlerTests.createWithNullHandlerShouldThrowException","org.springframework.boot.web.client.RootUriTemplateHandlerTests.applyShouldWrapExistingTemplate","org.springframework.boot.web.client.RootUriTemplateHandlerTests.expandArrayVariablesShouldPrefixRoot","org.springframework.boot.web.client.RootUriTemplateHandlerTests.createWithNullRootUriShouldThrowException","org.springframework.boot.web.client.RootUriTemplateHandlerTests.expandMapVariablesWhenPathDoesNotStartWithSlashShouldNotPrefixRoot","org.springframework.boot.web.client.RootUriTemplateHandlerTests.expandArrayVariablesWhenPathDoesNotStartWithSlashShouldNotPrefixRoot","org.springframework.boot.web.client.RootUriTemplateHandlerTests.expandMapVariablesShouldPrefixRoot","org.springframework.boot.context.properties.bind.validation.BindValidationExceptionTests.createWhenValidationErrorsIsNullShouldThrowException","org.springframework.boot.context.properties.bind.validation.BindValidationExceptionTests.getValidationErrorsShouldReturnValidationErrors","org.springframework.boot.web.client.RestTemplateBuilderTests.messageConvertersCollectionWhenConvertersAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.messageConvertersShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.connectTimeoutCanBeConfiguredOnHttpComponentsRequestFactory","org.springframework.boot.web.client.RestTemplateBuilderTests.basicAuthorizationShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.messageConvertersShouldReplaceExisting","org.springframework.boot.web.client.RestTemplateBuilderTests.additionalCustomizersShouldAddToExisting","org.springframework.boot.web.client.RestTemplateBuilderTests.rootUriShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.customizerShouldBeAppliedAtTheEnd","org.springframework.boot.web.client.RestTemplateBuilderTests.requestFactoryClassShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.connectTimeoutCanBeConfiguredOnOkHttp3RequestFactory","org.springframework.boot.web.client.RestTemplateBuilderTests.uriTemplateHandlerShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.buildShouldReturnRestTemplate","org.springframework.boot.web.client.RestTemplateBuilderTests.errorHandlerShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.configureShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.connectTimeoutCanBeConfiguredOnAWrappedRequestFactory","org.springframework.boot.web.client.RestTemplateBuilderTests.readTimeoutCanBeConfiguredOnHttpComponentsRequestFactory","org.springframework.boot.web.client.RestTemplateBuilderTests.defaultMessageConvertersShouldClearExisting","org.springframework.boot.web.client.RestTemplateBuilderTests.additionalInterceptorsCollectionWhenInterceptorsAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.additionalMessageConvertersCollectionWhenConvertersAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.customizersShouldBeAppliedLast","org.springframework.boot.web.client.RestTemplateBuilderTests.customizersCollectionWhenCustomizersAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.connectTimeoutCanBeNullToUseDefault","org.springframework.boot.web.client.RestTemplateBuilderTests.additionalMessageConvertersShouldAddToExisting","org.springframework.boot.web.client.RestTemplateBuilderTests.unwrappingDoesNotAffectRequestFactoryThatIsSetOnTheBuiltTemplate","org.springframework.boot.web.client.RestTemplateBuilderTests.uriTemplateHandlerWhenHandlerIsNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.additionalCustomizersWhenCustomizersAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.buildShouldDetectRequestFactory","org.springframework.boot.web.client.RestTemplateBuilderTests.additionalInterceptorsShouldAddToExisting","org.springframework.boot.web.client.RestTemplateBuilderTests.additionalCustomizersCollectionWhenCustomizersAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.customizersShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.requestFactoryClassWhenFactoryIsNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.requestFactoryWhenSupplierIsNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.interceptorsShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.requestFactoryPackagePrivateClassShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.requestFactoryShouldApply","org.springframework.boot.web.client.RestTemplateBuilderTests.readTimeoutCanBeNullToUseDefault","org.springframework.boot.web.client.RestTemplateBuilderTests.readTimeoutCanBeSetWithInteger","org.springframework.boot.web.client.RestTemplateBuilderTests.detectRequestFactoryWhenFalseShouldDisableDetection","org.springframework.boot.web.client.RestTemplateBuilderTests.interceptorsShouldReplaceExisting","org.springframework.boot.web.client.RestTemplateBuilderTests.additionalMessageConvertersWhenConvertersAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.connectTimeoutCanBeSetWithInteger","org.springframework.boot.web.client.RestTemplateBuilderTests.customizersWhenCustomizersAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.readTimeoutCanBeConfiguredOnAWrappedRequestFactory","org.springframework.boot.web.client.RestTemplateBuilderTests.createWhenCustomizersAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.connectTimeoutCanBeConfiguredOnSimpleRequestFactory","org.springframework.boot.web.client.RestTemplateBuilderTests.interceptorsCollectionWhenInterceptorsAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.errorHandlerWhenHandlerIsNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.readTimeoutCanBeConfiguredOnOkHttp3RequestFactory","org.springframework.boot.web.client.RestTemplateBuilderTests.interceptorsWhenInterceptorsAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.createWithCustomizersShouldApplyCustomizers","org.springframework.boot.web.client.RestTemplateBuilderTests.buildClassShouldReturnClassInstance","org.springframework.boot.web.client.RestTemplateBuilderTests.readTimeoutCanBeConfiguredOnSimpleRequestFactory","org.springframework.boot.web.client.RestTemplateBuilderTests.defaultMessageConvertersShouldSetDefaultList","org.springframework.boot.web.client.RestTemplateBuilderTests.rootUriShouldApplyAfterUriTemplateHandler","org.springframework.boot.web.client.RestTemplateBuilderTests.customizersShouldReplaceExisting","org.springframework.boot.web.client.RestTemplateBuilderTests.messageConvertersWhenConvertersAreNullShouldThrowException","org.springframework.boot.web.client.RestTemplateBuilderTests.additionalInterceptorsWhenInterceptorsAreNullShouldThrowException","org.springframework.boot.context.properties.bind.validation.OriginTrackedFieldErrorTests.ofWhenFieldErrorIsNullShouldReturnNull","org.springframework.boot.context.properties.bind.validation.OriginTrackedFieldErrorTests.toStringShouldAddOrigin","org.springframework.boot.context.properties.bind.validation.OriginTrackedFieldErrorTests.ofWhenOriginIsNullShouldReturnFieldErrorWithoutOrigin","org.springframework.boot.context.properties.bind.validation.OriginTrackedFieldErrorTests.ofShouldReturnOriginCapableFieldError","org.springframework.boot.validation.MessageInterpolatorFactoryWithoutElIntegrationTests.getObjectShouldUseFallback","org.springframework.boot.validation.MessageInterpolatorFactoryWithoutElIntegrationTests.defaultMessageInterpolatorShouldFail","org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldFailWithHandler","org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldBindWithoutHandler","org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldValidateNestedProperties","org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldFailWithAccessToOrigin","org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldFailWithAccessToBoundProperties","org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldNotValidateDepthGreaterThanZero","org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldValidateWithoutAnnotation","org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldFailWithAccessToName","org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldFailIfExistingValueIsInvalid","org.springframework.boot.validation.MessageInterpolatorFactoryTests.getObjectShouldReturnResourceBundleMessageInterpolator","org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.getErrorsShouldReturnErrors","org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.createWhenErrorsIsNullShouldThrowException","org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.getBoundPropertiesShouldReturnBoundProperties","org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.iteratorShouldIterateErrors","org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.createWhenNameIsNullShouldThrowException","org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.getErrorsShouldAdaptFieldErrorsToBeOriginProviders","org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.createWhenBoundPropertiesIsNullShouldThrowException","org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.getNameShouldReturnName","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeAndWhenReturnNullShouldReturnResult","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeAndWhenLambdaMismatchShouldSwallowException","org.springframework.boot.util.LambdaSafeTests.callbackWithLoggerShouldUseLogger","org.springframework.boot.util.LambdaSafeTests.callbackInvokeWhenLambdaMismatchOnDifferentArgumentShouldSwallowException","org.springframework.boot.util.LambdaSafeTests.callbackInvokeAndWhenHasGenericShouldReturnResult","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeAndWhenHasGenericShouldReturnResult","org.springframework.boot.util.LambdaSafeTests.callbackInvokeAndWhenNoGenericShouldReturnResult","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeAndWhenNoGenericShouldReturnResult","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeAndWhenHasResolvableGenericMatchShouldReturnResult","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeWhenHasResolvableGenericMatchShouldInvokeCallback","org.springframework.boot.util.LambdaSafeTests.callbackInvokeAndWhenHasResolvableGenericMatchShouldReturnResult","org.springframework.boot.util.LambdaSafeTests.callbackWithFilterShouldUseFilter","org.springframework.boot.util.LambdaSafeTests.callbackInvokeWhenHasResolvableGenericNonMatchShouldNotInvokeCallback","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeWhenLambdaMismatchShouldSwallowException","org.springframework.boot.util.LambdaSafeTests.callbackInvokeAndWhenLambdaMismatchShouldSwallowException","org.springframework.boot.util.LambdaSafeTests.callbackWhenCallbackInstanceIsNullShouldThrowException","org.springframework.boot.util.LambdaSafeTests.callbackInvokeAndWhenLambdaMismatchOnDifferentArgumentShouldSwallowException","org.springframework.boot.util.LambdaSafeTests.callbackWhenCallbackTypeIsNullShouldThrowException","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeWhenLambdaMismatchOnDifferentArgumentShouldSwallowException","org.springframework.boot.util.LambdaSafeTests.callbackInvokeWhenLambdaMismatchShouldSwallowException","org.springframework.boot.util.LambdaSafeTests.callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeWhenNoGenericShouldInvokeCallbacks","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeWhenMultipleShouldInvokeSuitable","org.springframework.boot.util.LambdaSafeTests.callbackInvokeWhenHasGenericShouldInvokeCallback","org.springframework.boot.util.LambdaSafeTests.callbackInvokeWhenNoGenericShouldInvokeCallback","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeWhenHasGenericShouldInvokeCallback","org.springframework.boot.util.LambdaSafeTests.callbackInvokeWhenHasResolvableGenericMatchShouldInvokeCallback","org.springframework.boot.util.LambdaSafeTests.callbacksInvokeWhenHasResolvableGenericNonMatchShouldNotInvokeCallback","org.springframework.boot.util.LambdaSafeTests.callbackInvokeAndWhenReturnNullShouldReturnResult","org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.containsDescendantOfWhenSourceReturnsUnknownShouldReturnUnknown","org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.containsDescendantOfWhenSourceReturnsPresentShouldReturnPresent","org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.containsDescendantOfWhenAllAreAbsentShouldReturnAbsent","org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.getConfigurationPropertyWhenNotAliasesShouldReturnValue","org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.getConfigurationPropertyShouldConsiderAliases","org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.containsDescendantOfWhenAnyIsPresentShouldReturnPresent","org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.getMetadataReaderUsesCache","org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.clearResetsCache","org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.streamShouldIncludeAliases","org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.containsDescendantOfWhenSourceReturnsUnknownShouldReturnUnknown","org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.containsDescendantOfWhenSourceReturnsPresentShouldReturnPresent","org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.containsDescendantOfWhenAllAreAbsentShouldReturnAbsent","org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.getConfigurationPropertyWhenNotAliasesShouldReturnValue","org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.getConfigurationPropertyShouldConsiderAliases","org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.containsDescendantOfWhenAnyIsPresentShouldReturnPresent","org.springframework.boot.task.TaskSchedulerBuilderTests.poolSettingsShouldApply","org.springframework.boot.task.TaskSchedulerBuilderTests.additionalCustomizersShouldAddToExisting","org.springframework.boot.task.TaskSchedulerBuilderTests.customizersShouldBeAppliedLast","org.springframework.boot.task.TaskSchedulerBuilderTests.customizersCollectionWhenCustomizersAreNullShouldThrowException","org.springframework.boot.task.TaskSchedulerBuilderTests.additionalCustomizersWhenCustomizersAreNullShouldThrowException","org.springframework.boot.task.TaskSchedulerBuilderTests.additionalCustomizersCollectionWhenCustomizersAreNullShouldThrowException","org.springframework.boot.task.TaskSchedulerBuilderTests.customizersShouldApply","org.springframework.boot.task.TaskSchedulerBuilderTests.threadNamePrefixShouldApply","org.springframework.boot.task.TaskSchedulerBuilderTests.customizersWhenCustomizersAreNullShouldThrowException","org.springframework.boot.task.TaskSchedulerBuilderTests.customizersShouldReplaceExisting","org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.createWithNameShouldAddMapping","org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.createWithStringShouldAddMapping","org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.addAliasesFromStringShouldAddMapping","org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.getAliasesWhenNotMappedShouldReturnEmptyList","org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.addAliasesFromNameShouldAddMapping","org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.getNameForAliasWhenHasMappingShouldReturnName","org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.addWhenHasExistingShouldAddAdditionalMappings","org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.getNameForAliasWhenNotMappedShouldReturnNull","org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.createWithStringWhenNullNameShouldThrowException","org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.getAliasesWhenMappedShouldReturnMapping","org.springframework.boot.task.TaskExecutorBuilderTests.poolSettingsShouldApply","org.springframework.boot.task.TaskExecutorBuilderTests.taskDecoratorShouldApply","org.springframework.boot.task.TaskExecutorBuilderTests.additionalCustomizersShouldAddToExisting","org.springframework.boot.task.TaskExecutorBuilderTests.customizersShouldBeAppliedLast","org.springframework.boot.task.TaskExecutorBuilderTests.customizersCollectionWhenCustomizersAreNullShouldThrowException","org.springframework.boot.task.TaskExecutorBuilderTests.additionalCustomizersWhenCustomizersAreNullShouldThrowException","org.springframework.boot.task.TaskExecutorBuilderTests.additionalCustomizersCollectionWhenCustomizersAreNullShouldThrowException","org.springframework.boot.task.TaskExecutorBuilderTests.customizersShouldApply","org.springframework.boot.task.TaskExecutorBuilderTests.threadNamePrefixShouldApply","org.springframework.boot.task.TaskExecutorBuilderTests.customizersWhenCustomizersAreNullShouldThrowException","org.springframework.boot.task.TaskExecutorBuilderTests.customizersShouldReplaceExisting","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldCreateName","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptWhenElementValueProcessorIsNullShouldAdapt","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isEmptyWhenEmptyShouldReturnTrue","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenMissingOpenBracket","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDotOnAssociative","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenNotIndexedShouldAppendWithDot","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDoubleRunOnAndAssociative","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDoubleDotAndAssociative","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptUnderscoreShouldReturnEmpty","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldSupportUnderscore","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenNestedBrackets","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldSupportIndexedElements","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptWhenNameIsNullShouldThrowException","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isLastElementIndexedWhenNotIndexedShouldReturnFalse","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenRunOnAssociative","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenParentShouldReturnTrue","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getNumberOfElementsShouldReturnNumberOfElement","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenRootShouldReturnTrue","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenMissingCloseBracket","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWithWhitespaceInAssociativeElement","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenGrandparentShouldReturnFalse","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.equalsAndHashCode","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.equalsWhenStartsWith","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWithUppercaseInAssociativeElement","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenElementNameIsNotValidShouldThrowException","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWithWhitespaceInName","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.chopWhenLessThenSizeShouldReturnChopped","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotBeNull","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenGrandparentShouldReturnTrue","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.chopWhenEqualToSizeShouldReturnExisting","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isValidWhenValidShouldReturnTrue","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementInUniformFormShouldNotIncludeDashes","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.compareShouldSortNames","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotContainUppercase","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenStartsWithNumber","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotStartWithDot","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.toStringShouldBeLowerCaseDashed","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isLastElementIndexedWhenIndexedShouldReturnTrue","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotEndWithDot","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotStartWithDash","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenRootReturnTrue","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDotAndAssociative","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementInOriginalFormShouldReturnElement","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotContainInvalidChars","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.compareDifferentLengthsShouldSortNames","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.toStringFromOfShouldBeLowerCaseDashed","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenElementNameMultiDotShouldThrowException","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenParentShouldReturnTrue","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getLastElementShouldGetLastElement","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldUseElementValueProcessor","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenMultipleMismatchedBrackets","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getLastElementWhenEmptyShouldReturnEmptyString","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isValidWhenNotValidShouldReturnFalse","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenElementNameIsNullShouldReturnName","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenSameShouldReturnFalse","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenIndexedShouldAppendWithBrackets","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenSimple","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldSupportMixedCase","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofWhenNameIsEmptyShouldReturnEmptyName","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenSameShouldReturnFalse","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementInUniformFormShouldReturnElement","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.chopWhenGreaterThanSizeShouldReturnExisting","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isEmptyWhenNotEmptyShouldReturnFalse","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldStripInvalidChars","org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementShouldNotIncludeAngleBrackets","org.springframework.boot.system.JavaVersionTests.compareToWhenComparingSameShouldBeZero","org.springframework.boot.system.JavaVersionTests.isOlderThanWhenSmallerToGreaterShouldBeTrue","org.springframework.boot.system.JavaVersionTests.isEqualOrNewerThanWhenGreaterToSmallerShouldBeTrue","org.springframework.boot.system.JavaVersionTests.isOlderThanThanWhenComparingSameShouldBeFalse","org.springframework.boot.system.JavaVersionTests.compareToWhenComparingSmallerToGreaterShouldBeLessThanZero","org.springframework.boot.system.JavaVersionTests.isEqualOrNewerThanWhenSmallerToGreaterShouldBeFalse","org.springframework.boot.system.JavaVersionTests.isOlderThanWhenGreaterToSmallerShouldBeFalse","org.springframework.boot.system.JavaVersionTests.isEqualOrNewerThanWhenComparingSameShouldBeTrue","org.springframework.boot.system.JavaVersionTests.compareToWhenComparingGreaterToSmallerShouldBeGreaterThanZero","org.springframework.boot.system.JavaVersionTests.getJavaVersionShouldBeAvailable","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyWhenMultipleShouldReturnFirst","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyShouldReturnValue","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyWhenNoneShouldReturnFirst","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyOriginShouldReturnOrigin","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyWhenNameIsNotValidShouldReturnNull","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyOriginWhenMissingShouldReturnNull","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getNameShouldReturnName","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getSourceShouldReturnSource","org.springframework.boot.system.ApplicationTempTests.differentBasedOnUserDir","org.springframework.boot.system.ApplicationTempTests.generatesConsistentTemp","org.springframework.boot.system.ApplicationTempTests.getSubDir","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.getWhenAttachedShouldReturnAttached","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.attachShouldReAttachInMergedSetup","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.getWhenNotAttachedShouldReturnAdapted","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.fromPropertySourceShouldReturnSpringConfigurationPropertySource","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.fromPropertySourceShouldFlattenPropertySources","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.attachShouldAddAdapterAtBeginning","org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.environmentPropertyExpansionShouldWorkWhenAttached","org.springframework.boot.system.ApplicationPidTests.writePid","org.springframework.boot.system.ApplicationPidTests.toStringWithoutPid","org.springframework.boot.system.ApplicationPidTests.toStringWithPid","org.springframework.boot.system.ApplicationPidTests.writeNewPid","org.springframework.boot.system.ApplicationPidTests.getPidFromJvm","org.springframework.boot.system.ApplicationPidTests.throwIllegalStateWritingMissingPid","org.springframework.boot.context.properties.source.ConfigurationPropertyStateTests.searchWhenIterableIsNullShouldThrowException","org.springframework.boot.context.properties.source.ConfigurationPropertyStateTests.searchWhenContainsItemShouldReturnPresent","org.springframework.boot.context.properties.source.ConfigurationPropertyStateTests.searchWhenContainsNoItemShouldReturnAbsent","org.springframework.boot.context.properties.source.ConfigurationPropertyStateTests.searchWhenPredicateIsNullShouldThrowException","org.springframework.boot.security.servlet.ApplicationContextRequestMatcherTests.matchesWhenContextClassIsApplicationContextShouldProvideContext","org.springframework.boot.security.servlet.ApplicationContextRequestMatcherTests.matchesWhenContextClassIsExistingBeanShouldProvideBean","org.springframework.boot.security.servlet.ApplicationContextRequestMatcherTests.createWhenContextClassIsNullShouldThrowException","org.springframework.boot.security.servlet.ApplicationContextRequestMatcherTests.matchesWhenContextClassIsBeanThatDoesNotExistShouldSupplyException","org.springframework.boot.context.properties.source.ConfigurationPropertyTests.equalsAndHashCode","org.springframework.boot.context.properties.source.ConfigurationPropertyTests.getPropertyOriginShouldReturnValuePropertyOrigin","org.springframework.boot.context.properties.source.ConfigurationPropertyTests.toStringShouldReturnValue","org.springframework.boot.context.properties.source.ConfigurationPropertyTests.createWhenNameIsNullShouldThrowException","org.springframework.boot.context.properties.source.ConfigurationPropertyTests.getValueShouldReturnValue","org.springframework.boot.context.properties.source.ConfigurationPropertyTests.getNameShouldReturnName","org.springframework.boot.context.properties.source.ConfigurationPropertyTests.createWhenValueIsNullShouldThrowException","org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcherTests.matchesWhenContextClassIsApplicationContextShouldProvideContext","org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcherTests.matchesWhenContextClassIsExistingBeanShouldProvideBean","org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcherTests.matchesWhenContextClassIsMissingBeanShouldProvideException","org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcherTests.createWhenContextClassIsNullShouldThrowException","org.springframework.boot.security.reactive.ApplicationContextServerWebExchangeMatcherTests.matchesWhenContextIsNull","org.springframework.boot.context.properties.source.DefaultPropertyMapperTests.mapFromConfigurationShouldReturnBestGuess","org.springframework.boot.context.properties.source.DefaultPropertyMapperTests.mapFromStringShouldReturnBestGuess","org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategyTests.tableNameShouldNotBeLowerCaseIfCaseSensitive","org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategyTests.tableNameShouldBeLowercaseUnderscore","org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.createWhenFilterIsNullShouldThrowException","org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsEmptyShouldReturnEmpty","org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse","org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.createWhenSourceIsNullShouldThrowException","org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.getValueShouldFilterNames","org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty","org.springframework.boot.origin.TextResourceOriginTests.equalsAndHashCodeShouldResourceAndLocation","org.springframework.boot.origin.TextResourceOriginTests.toStringWhenLocationIsNullShouldReturnNiceString","org.springframework.boot.origin.TextResourceOriginTests.getLocationColumnShouldReturnColumn","org.springframework.boot.origin.TextResourceOriginTests.getLocationShouldReturnLocation","org.springframework.boot.origin.TextResourceOriginTests.toStringWhenResourceIsNullShouldReturnNiceString","org.springframework.boot.origin.TextResourceOriginTests.getResourceShouldReturnResource","org.springframework.boot.origin.TextResourceOriginTests.getLocationLineShouldReturnLine","org.springframework.boot.origin.TextResourceOriginTests.locationEqualsAndHashCodeShouldUseLineAndColumn","org.springframework.boot.origin.TextResourceOriginTests.locationToStringShouldReturnNiceString","org.springframework.boot.origin.TextResourceOriginTests.createWithNullResourceShouldSetNullResource","org.springframework.boot.origin.TextResourceOriginTests.createWithNullLocationShouldSetNullLocation","org.springframework.boot.origin.TextResourceOriginTests.toStringShouldReturnNiceString","org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.iteratorShouldFilterNames","org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.containsDescendantOfShouldUseContents","org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.createWhenFilterIsNullShouldThrowException","org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsEmptyShouldReturnEmpty","org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse","org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.createWhenSourceIsNullShouldThrowException","org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.getValueShouldFilterNames","org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty","org.springframework.boot.origin.SystemEnvironmentOriginTests.toStringShouldReturnStringWithDetails","org.springframework.boot.origin.SystemEnvironmentOriginTests.createWhenPropertyNameIsEmptyShouldThrowException","org.springframework.boot.origin.SystemEnvironmentOriginTests.createWhenPropertyIsNullShouldThrowException","org.springframework.boot.origin.SystemEnvironmentOriginTests.getPropertyShouldReturnProperty","org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.iteratorShouldGetFromMemory","org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.putAllShouldPutEntries","org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.createWhenMapIsNullShouldThrowException","org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.putShouldPutEntry","org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.getConfigurationPropertyShouldGetFromMemory","org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.streamShouldGetFromMemory","org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.putAllWhenMapIsNullShouldThrowException","org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.createWhenMapHasEntriesShouldAdaptMap","org.springframework.boot.origin.PropertySourceOriginTests.toStringShouldShowDetails","org.springframework.boot.origin.PropertySourceOriginTests.getPropertyNameShouldReturnPropertyName","org.springframework.boot.origin.PropertySourceOriginTests.getPropertySourceShouldReturnPropertySource","org.springframework.boot.origin.PropertySourceOriginTests.createWhenPropertyNameIsEmptyShouldThrowException","org.springframework.boot.origin.PropertySourceOriginTests.getWhenPropertySourceSupportsOriginLookupShouldReturnOrigin","org.springframework.boot.origin.PropertySourceOriginTests.createWhenPropertyNameIsNullShouldThrowException","org.springframework.boot.origin.PropertySourceOriginTests.getWhenPropertySourceSupportsOriginLookupButNoOriginShouldWrap","org.springframework.boot.origin.PropertySourceOriginTests.getWhenPropertySourceIsNotOriginAwareShouldWrap","org.springframework.boot.origin.PropertySourceOriginTests.createWhenPropertySourceIsNullShouldThrowException","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.getValueWhenOriginCapableShouldIncludeSourceOrigin","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.fromWhenNonEnumerableShouldReturnNonIterable","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.fromWhenEnumerableButRestrictedShouldReturnNonIterable","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.getValueShouldUseDirectMapping","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.createWhenMapperIsNullShouldThrowException","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.getWhenEnumerableShouldBeIterable","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.containsDescendantOfShouldReturnEmpty","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.fromWhenPropertySourceIsNullShouldThrowException","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.createWhenPropertySourceIsNullShouldThrowException","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.getValueOrigin","org.springframework.boot.origin.OriginTrackedValueTests.hashCodeAndEqualsShouldIgnoreOrigin","org.springframework.boot.origin.OriginTrackedValueTests.ofWhenValueIsCharSequenceShouldReturnCharSequence","org.springframework.boot.origin.OriginTrackedValueTests.getValueShouldReturnValue","org.springframework.boot.origin.OriginTrackedValueTests.toStringShouldReturnValueToString","org.springframework.boot.origin.OriginTrackedValueTests.getOriginShouldReturnOrigin","org.springframework.boot.origin.OriginTrackedValueTests.ofWhenValueIsNullShouldReturnNull","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldAdaptPropertySource","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldFlattenEnvironment","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldExtendedAdaptSystemEnvironmentPropertySource","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldAdaptSystemEnvironmentPropertySourceWithUnderscoreValue","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldAdaptSystemEnvironmentPropertySource","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldNotAdaptSystemEnvironmentPropertyOverrideSource","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldTrackChanges","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.createWhenPropertySourcesIsNullShouldThrowException","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldTrackWhenSourceHasIdenticalName","org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldAdaptMultiplePropertySources","org.springframework.boot.origin.OriginTests.fromWhenSourceIsNullShouldReturnNull","org.springframework.boot.origin.OriginTests.fromWhenSourceIsRegularObjectShouldReturnNull","org.springframework.boot.origin.OriginTests.fromWhenSourceIsThrowableAndOriginProviderThatReturnsNullShouldUseCause","org.springframework.boot.origin.OriginTests.fromWhenSourceIsOriginShouldReturnSource","org.springframework.boot.origin.OriginTests.fromWhenSourceIsOriginProviderShouldReturnProvidedOrigin","org.springframework.boot.origin.OriginTests.fromWhenSourceIsThrowableShouldUseCause","org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.getValueWhenOriginCapableShouldIncludeSourceOrigin","org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.getValueShouldUseEnumerableMapping","org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.iteratorShouldAdaptNames","org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.getValueShouldUseDirectMapping","org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.propertySourceKeyDataChangeInvalidatesCache","org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.createWhenMapperIsNullShouldThrowException","org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.createWhenPropertySourceIsNullShouldThrowException","org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.containsDescendantOfShouldCheckSourceNames","org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.getValueOrigin","org.springframework.boot.origin.OriginLookupTests.getOriginWhenSourceIsNotLookupShouldReturnLookupOrigin","org.springframework.boot.origin.OriginLookupTests.getOriginWhenSourceLookupThrowsAndErrorShouldReturnNull","org.springframework.boot.origin.OriginLookupTests.getOriginWhenSourceIsLookupShouldReturnLookupOrigin","org.springframework.boot.origin.OriginLookupTests.getOriginWhenSourceIsNullShouldReturnNull","org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapperTests.underscoreShouldNotMapToEmptyString","org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapperTests.mapFromConfigurationShouldReturnBestGuess","org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapperTests.mapFromStringShouldReturnBestGuess","org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapperTests.underscoreWithWhitespaceShouldNotMapToEmptyString","org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverterTests.withStackTrace","org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverterTests.noStackTrace","org.springframework.boot.context.properties.source.UnboundElementsSourceFilterTests.filterWhenSourceIsNotSystemShouldReturnTrue","org.springframework.boot.context.properties.source.UnboundElementsSourceFilterTests.filterWhenSourceIsSystemPropertiesPropertySourceShouldReturnFalse","org.springframework.boot.context.properties.source.UnboundElementsSourceFilterTests.filterWhenSourceIsSystemEnvironmentPropertySourceShouldReturnFalse","org.springframework.boot.logging.logback.SpringProfileActionTests.environmentIsQueriedWithResolvedValueWhenNameAttributeUsesAPlaceholder","org.springframework.boot.logging.logback.SpringProfileActionTests.environmentIsQueriedWithProfileFromNameAttribute","org.springframework.boot.logging.logback.SpringProfileActionTests.environmentIsQueriedWithResolvedValuesFromCommaSeparatedNameNameAttributeWithPlaceholders","org.springframework.boot.logging.logback.SpringProfileActionTests.environmentIsQueriedWithMultipleProfilesFromCommaSeparatedNameAttribute","org.springframework.boot.convert.ArrayToDelimitedStringConverterTests.convertShouldConvertElements","org.springframework.boot.convert.ArrayToDelimitedStringConverterTests.convertListToStringShouldConvert","org.springframework.boot.convert.ArrayToDelimitedStringConverterTests.convertShouldConvertNull","org.springframework.boot.convert.ArrayToDelimitedStringConverterTests.convertWhenHasDelimiterDashShouldConvert","org.springframework.boot.convert.ArrayToDelimitedStringConverterTests.convertWhenHasDelimiterNoneShouldConvert","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.relaxedSpringPropertyWithDefaultValue","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.springPropertyWithDefaultValue","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.relaxedSpringProperty","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.profileActive","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.profileNotActive","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.springProperty","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.profileNestedActiveNotActive","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.springPropertyNoValue","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.profileExpressionNoMatch","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.profileNestedNotActiveNotActive","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.multipleNamesFirstProfileActive","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.relaxedSpringPropertyNoValue","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.profileNestedActiveActive","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.profileExpressionMatchSecond","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.profileNestedNotActiveActive","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.profileExpressionMatchFirst","org.springframework.boot.logging.logback.SpringBootJoranConfiguratorTests.multipleNamesSecondProfileActive","org.springframework.boot.convert.CharArrayFormatterTests.convertFromCharArrayToStringShouldConvert","org.springframework.boot.convert.CharArrayFormatterTests.convertFromStringToCharArrayShouldConvert","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.getLoggingConfigurations","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.loggingThatUsesJulIsCaptured","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testNonDefaultConfigLocation","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.systemLevelTraceShouldReturnNativeLevelTraceNotAll","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testMaxFileSizeProperty","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testLogbackSpecificSystemProperty","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.noFile","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.getLoggingConfiguration","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.withFile","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testBasicConfigLocation","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testMaxHistoryPropertyWithXmlConfiguration","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.setLevelToNull","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testConsolePatternProperty","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.getSupportedLevels","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.standardConfigLocations","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.initializationIsOnlyPerformedOnceUntilCleanedUp","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.loggingLevelIsPropagatedToJul","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.customExceptionConversionWord","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testNonexistentConfigLocation","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.springConfigLocations","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testMaxFileSizePropertyWithXmlConfiguration","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.initializeShouldSetSystemProperty","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.bridgeHandlerLifecycle","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.setLevel","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testLevelPatternProperty","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testMaxHistoryProperty","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testDateformatPatternProperty","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.exceptionsIncludeClassPackaging","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.testFilePatternProperty","org.springframework.boot.logging.logback.LogbackLoggingSystemTests.getLoggingConfigurationForALL","org.springframework.boot.convert.CollectionToDelimitedStringConverterTests.convertShouldConvertElements","org.springframework.boot.convert.CollectionToDelimitedStringConverterTests.convertListToStringShouldConvert","org.springframework.boot.convert.CollectionToDelimitedStringConverterTests.convertShouldConvertNull","org.springframework.boot.convert.CollectionToDelimitedStringConverterTests.convertWhenHasDelimiterDashShouldConvert","org.springframework.boot.convert.CollectionToDelimitedStringConverterTests.convertWhenHasDelimiterNoneShouldConvert","org.springframework.boot.logging.logback.LogbackConfigurationTests.filePatternCanBeOverridden","org.springframework.boot.logging.logback.LogbackConfigurationTests.consolePatternCanBeOverridden","org.springframework.boot.convert.DelimitedStringToArrayConverterTests.matchesWhenHasAnnotationAndConvertibleElementTypeShouldReturnTrue","org.springframework.boot.convert.DelimitedStringToArrayConverterTests.matchesWhenTargetIsNotAnnotatedShouldReturnTrue","org.springframework.boot.convert.DelimitedStringToArrayConverterTests.convertWhenHasConvertibleElementTypeShouldReturnConvertedType","org.springframework.boot.convert.DelimitedStringToArrayConverterTests.matchesWhenHasAnnotationAndNonConvertibleElementTypeShouldReturnFalse","org.springframework.boot.convert.DelimitedStringToArrayConverterTests.convertWhenHasDelimiterOfNoneShouldReturnWholeString","org.springframework.boot.convert.DelimitedStringToArrayConverterTests.canConvertFromStringToArrayShouldReturnTrue","org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverterTests.withStackTrace","org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverterTests.noStackTrace","org.springframework.boot.convert.DelimitedStringToCollectionConverterTests.matchesWhenHasAnnotationAndConvertibleElementTypeShouldReturnTrue","org.springframework.boot.convert.DelimitedStringToCollectionConverterTests.canConvertFromStringToCollectionShouldReturnTrue","org.springframework.boot.convert.DelimitedStringToCollectionConverterTests.matchesWhenTargetIsNotAnnotatedShouldReturnTrue","org.springframework.boot.convert.DelimitedStringToCollectionConverterTests.convertWhenHasConvertibleElementTypeShouldReturnConvertedType","org.springframework.boot.convert.DelimitedStringToCollectionConverterTests.matchesWhenHasAnnotationAndNonConvertibleElementTypeShouldReturnFalse","org.springframework.boot.convert.DelimitedStringToCollectionConverterTests.convertWhenHasNoElementTypeShouldReturnTrimmedString","org.springframework.boot.convert.DelimitedStringToCollectionConverterTests.matchesWhenHasAnnotationAndNoElementTypeShouldReturnTrue","org.springframework.boot.convert.DelimitedStringToCollectionConverterTests.convertWhenHasCollectionObjectTypeShouldUseCollectionObjectType","org.springframework.boot.convert.DelimitedStringToCollectionConverterTests.convertWhenHasDelimiterOfNoneShouldReturnWholeString","org.springframework.boot.logging.logback.ColorConverterTests.yellow","org.springframework.boot.logging.logback.ColorConverterTests.red","org.springframework.boot.logging.logback.ColorConverterTests.blue","org.springframework.boot.logging.logback.ColorConverterTests.cyan","org.springframework.boot.logging.logback.ColorConverterTests.faint","org.springframework.boot.logging.logback.ColorConverterTests.green","org.springframework.boot.logging.logback.ColorConverterTests.highlightDebug","org.springframework.boot.logging.logback.ColorConverterTests.highlightError","org.springframework.boot.logging.logback.ColorConverterTests.highlightTrace","org.springframework.boot.logging.logback.ColorConverterTests.magenta","org.springframework.boot.logging.logback.ColorConverterTests.highlightWarn","org.springframework.boot.convert.DurationStyleTests.printSimpleWithoutUnitShouldPrintInMs","org.springframework.boot.convert.DurationStyleTests.detectWhenUnknownShouldThrowException","org.springframework.boot.convert.DurationStyleTests.parseSimpleWithUnitShouldUseUnitAsFallback","org.springframework.boot.convert.DurationStyleTests.printIso8601ShouldIgnoreUnit","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleHoursShouldReturnDuration","org.springframework.boot.convert.DurationStyleTests.parseSimpleWhenIso8601ShouldThrowException","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleMinutesShouldReturnDuration","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleWithoutSuffixButWithChronoUnitShouldReturnDuration","org.springframework.boot.convert.DurationStyleTests.detectWhenSimpleShouldReturnSimple","org.springframework.boot.convert.DurationStyleTests.printSimpleWithUnitShouldPrintInUnit","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleWithoutSuffixShouldReturnDuration","org.springframework.boot.convert.DurationStyleTests.parseIso8601ShouldParse","org.springframework.boot.convert.DurationStyleTests.printIso8601ShouldPrint","org.springframework.boot.convert.DurationStyleTests.parseIso8601WithUnitShouldIgnoreUnit","org.springframework.boot.convert.DurationStyleTests.parseIso8601WhenSimpleShouldThrowException","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenBadFormatShouldThrowException","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenValueIsNullShouldThrowException","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleSecondsShouldReturnDuration","org.springframework.boot.convert.DurationStyleTests.parseSimpleWhenUnknownUnitShouldThrowException","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenIso8601ShouldReturnDuration","org.springframework.boot.convert.DurationStyleTests.parseSimpleShouldParse","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleMillisShouldReturnDuration","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleNanosShouldReturnDuration","org.springframework.boot.convert.DurationStyleTests.detectWhenIso8601ShouldReturnIso8601","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleMicrosShouldReturnDuration","org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleDaysShouldReturnDuration","org.springframework.boot.logging.log4j2.WhitespaceThrowablePatternConverterTests.withStackTrace","org.springframework.boot.logging.log4j2.WhitespaceThrowablePatternConverterTests.noStackTrace","org.springframework.boot.convert.DurationToNumberConverterTests.convertWithoutStyleShouldReturnMs","org.springframework.boot.convert.DurationToNumberConverterTests.convertWithFormatShouldUseIgnoreFormat","org.springframework.boot.convert.DurationToNumberConverterTests.convertWithFormatAndUnitShouldUseFormatAndUnit","org.springframework.boot.logging.log4j2.SpringBootConfigurationFactoryTests.producesConfigurationWithShutdownHookDisabled","org.springframework.boot.convert.DurationToStringConverterTests.convertWithFormatShouldUseFormatAndMs","org.springframework.boot.convert.DurationToStringConverterTests.convertWithoutStyleShouldReturnIso8601","org.springframework.boot.convert.DurationToStringConverterTests.convertWithFormatAndUnitShouldUseFormatAndUnit","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.getLoggingConfigurations","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.loggingThatUsesJulIsCaptured","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.testNonDefaultConfigLocation","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.configLocationsWithJacksonDataformatYaml","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.noFile","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.getLoggingConfiguration","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.withFile","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.configLocationsWithJacksonDatabindAndDataformatYaml","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.setLevelToNull","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.beforeInitializeFilterDisablesErrorLogging","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.getSupportedLevels","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.initializationIsOnlyPerformedOnceUntilCleanedUp","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.configLocationsWithNoExtraDependencies","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.customExceptionConversionWord","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.testNonexistentConfigLocation","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.springConfigLocations","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.configLocationsWithJacksonDatabind","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.setLevelOfUnconfiguredLoggerDoesNotAffectRootConfiguration","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.setLevel","org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.exceptionsIncludeClassPackaging","org.springframework.boot.convert.InetAddressFormatterTests.convertFromStringToInetAddressShouldConvert","org.springframework.boot.convert.InetAddressFormatterTests.convertFromStringToInetAddressWhenHostDoesNotExistShouldThrowException","org.springframework.boot.convert.InetAddressFormatterTests.convertFromInetAddressToStringShouldConvert","org.springframework.boot.logging.log4j2.ExtendedWhitespaceThrowablePatternConverterTests.withStackTrace","org.springframework.boot.logging.log4j2.ExtendedWhitespaceThrowablePatternConverterTests.noStackTrace","org.springframework.boot.convert.IsoOffsetFormatterTests.convertShouldConvertStringToIsoDate","org.springframework.boot.convert.IsoOffsetFormatterTests.convertShouldConvertIsoDateToString","org.springframework.boot.logging.log4j2.ColorConverterTests.yellow","org.springframework.boot.logging.log4j2.ColorConverterTests.red","org.springframework.boot.logging.log4j2.ColorConverterTests.blue","org.springframework.boot.logging.log4j2.ColorConverterTests.cyan","org.springframework.boot.logging.log4j2.ColorConverterTests.faint","org.springframework.boot.logging.log4j2.ColorConverterTests.green","org.springframework.boot.logging.log4j2.ColorConverterTests.highlightDebug","org.springframework.boot.logging.log4j2.ColorConverterTests.highlightError","org.springframework.boot.logging.log4j2.ColorConverterTests.highlightFatal","org.springframework.boot.logging.log4j2.ColorConverterTests.highlightTrace","org.springframework.boot.logging.log4j2.ColorConverterTests.magenta","org.springframework.boot.logging.log4j2.ColorConverterTests.highlightWarn","org.springframework.boot.convert.NumberToDataSizeConverterTests.convertWhenSimpleWithoutSuffixShouldReturnDataSize","org.springframework.boot.convert.NumberToDataSizeConverterTests.convertWhenSimpleWithoutSuffixButWithAnnotationShouldReturnDataSize","org.springframework.boot.logging.java.JavaLoggingSystemTests.getLoggingConfigurations","org.springframework.boot.logging.java.JavaLoggingSystemTests.testNonDefaultConfigLocation","org.springframework.boot.logging.java.JavaLoggingSystemTests.testSystemPropertyInitializesFormat","org.springframework.boot.logging.java.JavaLoggingSystemTests.noFile","org.springframework.boot.logging.java.JavaLoggingSystemTests.getLoggingConfiguration","org.springframework.boot.logging.java.JavaLoggingSystemTests.withFile","org.springframework.boot.logging.java.JavaLoggingSystemTests.setLevelToNull","org.springframework.boot.logging.java.JavaLoggingSystemTests.getSupportedLevels","org.springframework.boot.logging.java.JavaLoggingSystemTests.testCustomFormatter","org.springframework.boot.logging.java.JavaLoggingSystemTests.testNonexistentConfigLocation","org.springframework.boot.logging.java.JavaLoggingSystemTests.setLevel","org.springframework.boot.convert.NumberToDurationConverterTests.convertWhenSimpleWithoutSuffixShouldReturnDuration","org.springframework.boot.convert.NumberToDurationConverterTests.convertWhenSimpleWithoutSuffixButWithAnnotationShouldReturnDuration","org.springframework.boot.logging.LoggingSystemTests.loggingSystemCanBeDisabled","org.springframework.boot.logging.LoggingSystemTests.listLoggerConfigurationsIsUnsupported","org.springframework.boot.logging.LoggingSystemTests.getLoggerConfigurationIsUnsupported","org.springframework.boot.convert.StringToDataSizeConverterTests.convertWhenSimpleWithoutSuffixShouldReturnDataSize","org.springframework.boot.convert.StringToDataSizeConverterTests.convertWhenSimpleMegabytesShouldReturnDataSize","org.springframework.boot.convert.StringToDataSizeConverterTests.convertWhenBadFormatShouldThrowException","org.springframework.boot.convert.StringToDataSizeConverterTests.convertWhenSimpleWithoutSuffixButWithAnnotationShouldReturnDataSize","org.springframework.boot.convert.StringToDataSizeConverterTests.convertWhenEmptyShouldReturnNull","org.springframework.boot.convert.StringToDataSizeConverterTests.convertWhenSimpleBytesShouldReturnDataSize","org.springframework.boot.convert.StringToDataSizeConverterTests.convertWhenSimpleTerabytesShouldReturnDataSize","org.springframework.boot.convert.StringToDataSizeConverterTests.convertWhenSimpleKilobytesShouldReturnDataSize","org.springframework.boot.convert.StringToDataSizeConverterTests.convertWhenSimpleGigabytesShouldReturnDataSize","org.springframework.boot.logging.LoggingSystemPropertiesTests.pidIsSet","org.springframework.boot.logging.LoggingSystemPropertiesTests.consoleLogPatternCanReferencePid","org.springframework.boot.logging.LoggingSystemPropertiesTests.fileLogPatternIsSet","org.springframework.boot.logging.LoggingSystemPropertiesTests.consoleLogPatternIsSet","org.springframework.boot.logging.LoggingSystemPropertiesTests.fileLogPatternCanReferencePid","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenSimpleHoursShouldReturnDuration","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenSimpleSecondsShouldReturnDuration","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenSimpleWithoutSuffixShouldReturnDuration","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenBadFormatShouldThrowException","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenEmptyShouldReturnNull","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenSimpleWithoutSuffixButWithAnnotationShouldReturnDuration","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenSimpleMillisShouldReturnDuration","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenSimpleMicrosShouldReturnDuration","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenStyleMismatchShouldThrowException","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenSimpleDaysShouldReturnDuration","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenSimpleMinutesShouldReturnDuration","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenSimpleNanosShouldReturnDuration","org.springframework.boot.convert.StringToDurationConverterTests.convertWhenIso8601ShouldReturnDuration","org.springframework.boot.logging.LoggerConfigurationComparatorTests.rootLoggerFirstEmpty","org.springframework.boot.logging.LoggerConfigurationComparatorTests.rootLoggerSecondEmpty","org.springframework.boot.logging.LoggerConfigurationComparatorTests.rootLoggerFirst","org.springframework.boot.logging.LoggerConfigurationComparatorTests.lexicalSecond","org.springframework.boot.logging.LoggerConfigurationComparatorTests.lexicalEqual","org.springframework.boot.logging.LoggerConfigurationComparatorTests.lexicalFirst","org.springframework.boot.logging.LoggerConfigurationComparatorTests.rootLoggerSecond","org.springframework.boot.convert.StringToEnumIgnoringCaseConverterFactoryTests.canConvertFromStringToEnumSubclassShouldReturnTrue","org.springframework.boot.convert.StringToEnumIgnoringCaseConverterFactoryTests.convertFromStringToEnumWhenUsingNonEnglishLocaleShouldConvertValue","org.springframework.boot.convert.StringToEnumIgnoringCaseConverterFactoryTests.convertFromStringToEnumWhenExactMatchShouldConvertValue","org.springframework.boot.convert.StringToEnumIgnoringCaseConverterFactoryTests.canConvertFromStringToEnumShouldReturnTrue","org.springframework.boot.convert.StringToEnumIgnoringCaseConverterFactoryTests.convertFromStringToEnumWhenFuzzyMatchShouldConvertValue","org.springframework.boot.logging.LogFileTests.loggingFile","org.springframework.boot.logging.LogFileTests.loggingPath","org.springframework.boot.logging.LogFileTests.loggingFileAndPath","org.springframework.boot.logging.LogFileTests.noProperties","org.springframework.boot.diagnostics.FailureAnalyzersIntegrationTests.analysisIsPerformed","org.springframework.boot.logging.DeferredLogTests.isErrorEnabled","org.springframework.boot.logging.DeferredLogTests.isTraceEnabled","org.springframework.boot.logging.DeferredLogTests.fatalWithThrowable","org.springframework.boot.logging.DeferredLogTests.errorWithThrowable","org.springframework.boot.logging.DeferredLogTests.isDebugEnabled","org.springframework.boot.logging.DeferredLogTests.isInfoEnabled","org.springframework.boot.logging.DeferredLogTests.infoWithThrowable","org.springframework.boot.logging.DeferredLogTests.clearsOnReplayTo","org.springframework.boot.logging.DeferredLogTests.switchTo","org.springframework.boot.logging.DeferredLogTests.debugWithThrowable","org.springframework.boot.logging.DeferredLogTests.info","org.springframework.boot.logging.DeferredLogTests.warn","org.springframework.boot.logging.DeferredLogTests.isFatalEnabled","org.springframework.boot.logging.DeferredLogTests.debug","org.springframework.boot.logging.DeferredLogTests.error","org.springframework.boot.logging.DeferredLogTests.fatal","org.springframework.boot.logging.DeferredLogTests.trace","org.springframework.boot.logging.DeferredLogTests.isWarnEnabled","org.springframework.boot.logging.DeferredLogTests.warnWithThrowable","org.springframework.boot.logging.DeferredLogTests.traceWithThrowable","org.springframework.boot.diagnostics.FailureAnalyzersTests.beanFactoryIsInjectedIntoBeanFactoryAwareFailureAnalyzers","org.springframework.boot.diagnostics.FailureAnalyzersTests.environmentIsInjectedIntoEnvironmentAwareFailureAnalyzers","org.springframework.boot.diagnostics.FailureAnalyzersTests.analyzerThatFailsDuringInitializationDoesNotPreventOtherAnalyzersFromBeingCalled","org.springframework.boot.diagnostics.FailureAnalyzersTests.analyzersAreLoadedAndCalled","org.springframework.boot.diagnostics.FailureAnalyzersTests.analyzerThatFailsDuringAnalysisDoesNotPreventOtherAnalyzersFromBeingCalled","org.springframework.boot.liquibase.SpringPackageScanClassResolverTests.testScan","org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzerTests.cycleWithAnUnknownStartIsNotAnalyzed","org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzerTests.cyclicBeanMethods","org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzerTests.cycleWithAutowiredFields","org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzerTests.cycleReferencedViaOtherBeans","org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListenerTests.replaceServiceLocatorBacksOffIfNotPresent","org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListenerTests.replacesServiceLocator","org.springframework.boot.diagnostics.analyzer.BeanDefinitionOverrideFailureAnalyzerTests.analyzeBeanDefinitionOverrideException","org.springframework.boot.jta.bitronix.PoolingDataSourceBeanTests.sensibleDefaults","org.springframework.boot.jta.bitronix.PoolingDataSourceBeanTests.doesNotSetUniqueNameIfNotNull","org.springframework.boot.jta.bitronix.PoolingDataSourceBeanTests.setDataSource","org.springframework.boot.jta.bitronix.PoolingDataSourceBeanTests.setsUniqueNameIfNull","org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzerTests.jdkProxyCausesInjectionFailure","org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBeanTests.setConnectionFactory","org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBeanTests.sensibleDefaults","org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBeanTests.doesNotSetUniqueNameIfNotNull","org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBeanTests.setsUniqueNameIfNull","org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.analysisForValidationExceptionIsNull","org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.analysisForUnboundElementsIsNull","org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.bindExceptionDueToOtherFailure","org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.bindExceptionForUnknownValueInEnumListsValidValuesInAction","org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.bindExceptionWithNestedFailureShouldDisplayNestedMessage","org.springframework.boot.jta.bitronix.BitronixXADataSourceWrapperTests.wrap","org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzerTests.bindExceptionWithOriginDueToValidationFailure","org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzerTests.bindExceptionWithObjectErrorsDueToValidationFailure","org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzerTests.otherBindExceptionShouldReturnAnalysis","org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzerTests.bindExceptionWithFieldErrorsDueToValidationFailure","org.springframework.boot.jta.bitronix.BitronixXAConnectionFactoryWrapperTests.wrap","org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyNameFailureAnalyzerTests.analysisWhenRootCauseIsBeanCreationFailureShouldContainBeanName","org.springframework.boot.jta.bitronix.BitronixDependentBeanFactoryPostProcessorTests.setsDependsOn","org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzerTests.analysisWithKnownPropertyAndOtherCandidates","org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzerTests.analysisWithKnownProperty","org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzerTests.analysisWithNullEnvironment","org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzerTests.analysisWithUnknownKey","org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzerTests.analysisWithKnownPropertyAndNoReason","org.springframework.boot.jta.atomikos.AtomikosXADataSourceWrapperTests.wrap","org.springframework.boot.diagnostics.analyzer.NoSuchMethodFailureAnalyzerTests.noSuchMethodErrorIsAnalyzed","org.springframework.boot.jta.atomikos.AtomikosXAConnectionFactoryWrapperTests.wrap","org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForConstructorConsumer","org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForObjectProviderConstructorConsumer","org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForObjectProviderMethodConsumer","org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForMethodConsumer","org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForXmlConsumer","org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForFieldConsumer","org.springframework.boot.jta.atomikos.AtomikosPropertiesTests.testProperties","org.springframework.boot.jta.atomikos.AtomikosPropertiesTests.testDefaultProperties","org.springframework.boot.diagnostics.analyzer.UnboundConfigurationPropertyFailureAnalyzerTests.bindExceptionDueToUnboundElements","org.springframework.boot.jta.atomikos.AtomikosDependsOnBeanFactoryPostProcessorTests.setsDependsOn","org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzerTests.validatedPropertiesTest","org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzerTests.nonValidatedPropertiesTest","org.springframework.boot.jta.atomikos.AtomikosDataSourceBeanTests.beanMethods","org.springframework.boot.env.NoSnakeYamlPropertySourceLoaderTests.load","org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBeanTests.beanMethods","org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyOriginWhenTrackedShouldReturnOrigin","org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyWhenNonTrackedShouldReturnValue","org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyOriginWhenNonTrackedShouldReturnNull","org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyWhenMissingShouldReturnNull","org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyWhenTrackedShouldReturnValue","org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyOriginWhenMissingShouldReturnNull","org.springframework.boot.json.YamlJsonParserTests.simpleMap","org.springframework.boot.json.YamlJsonParserTests.listWithLeadingWhitespace","org.springframework.boot.json.YamlJsonParserTests.doubleValue","org.springframework.boot.json.YamlJsonParserTests.listWithNullThrowsARuntimeException","org.springframework.boot.json.YamlJsonParserTests.listWithEmptyStringThrowsARuntimeException","org.springframework.boot.json.YamlJsonParserTests.mapOfLists","org.springframework.boot.json.YamlJsonParserTests.simpleList","org.springframework.boot.json.YamlJsonParserTests.emptyList","org.springframework.boot.json.YamlJsonParserTests.stringContainingNumber","org.springframework.boot.json.YamlJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException","org.springframework.boot.json.YamlJsonParserTests.escapeQuote","org.springframework.boot.json.YamlJsonParserTests.stringContainingComma","org.springframework.boot.json.YamlJsonParserTests.listOfMaps","org.springframework.boot.json.YamlJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException","org.springframework.boot.json.YamlJsonParserTests.listWithMapThrowsARuntimeException","org.springframework.boot.json.YamlJsonParserTests.mapWithListThrowsARuntimeException","org.springframework.boot.json.YamlJsonParserTests.mapWithNullThrowsARuntimeException","org.springframework.boot.json.YamlJsonParserTests.emptyMap","org.springframework.boot.json.YamlJsonParserTests.mapWithLeadingWhitespace","org.springframework.boot.json.YamlJsonParserTests.mapWithEmptyStringThrowsARuntimeException","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithWhiteSpace","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getImmediateMultiline","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithBang","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithSpaceSeparator","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getSimplePropertyWithColonSeparator","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithValueComment","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getMultiline","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithSeparatorInValue","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithISO88591Character","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.compareToJavaProperties","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithFormFeed","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getMalformedUnicodeProperty","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getSimpleProperty","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithBackslashEscaped","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithCarriageReturn","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getUnicodeProperty","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithTab","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithSeparatorSurroundedBySpaces","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getEscapedProperty","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithMultilineImmediateBang","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithEmptyValue","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithWhitespaceAfterKey","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithNewLine","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithBackslashEscapedInValue","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getListProperty","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithTrailingSpace","org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getCommentedOutPropertyShouldBeNull","org.springframework.boot.json.JacksonJsonParserTests.instanceWithSpecificObjectMapper","org.springframework.boot.json.JacksonJsonParserTests.simpleMap","org.springframework.boot.json.JacksonJsonParserTests.listWithLeadingWhitespace","org.springframework.boot.json.JacksonJsonParserTests.doubleValue","org.springframework.boot.json.JacksonJsonParserTests.listWithNullThrowsARuntimeException","org.springframework.boot.json.JacksonJsonParserTests.listWithEmptyStringThrowsARuntimeException","org.springframework.boot.json.JacksonJsonParserTests.mapOfLists","org.springframework.boot.json.JacksonJsonParserTests.simpleList","org.springframework.boot.json.JacksonJsonParserTests.emptyList","org.springframework.boot.json.JacksonJsonParserTests.stringContainingNumber","org.springframework.boot.json.JacksonJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException","org.springframework.boot.json.JacksonJsonParserTests.escapeQuote","org.springframework.boot.json.JacksonJsonParserTests.stringContainingComma","org.springframework.boot.json.JacksonJsonParserTests.listOfMaps","org.springframework.boot.json.JacksonJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException","org.springframework.boot.json.JacksonJsonParserTests.listWithMapThrowsARuntimeException","org.springframework.boot.json.JacksonJsonParserTests.mapWithListThrowsARuntimeException","org.springframework.boot.json.JacksonJsonParserTests.mapWithNullThrowsARuntimeException","org.springframework.boot.json.JacksonJsonParserTests.emptyMap","org.springframework.boot.json.JacksonJsonParserTests.mapWithLeadingWhitespace","org.springframework.boot.json.JacksonJsonParserTests.mapWithEmptyStringThrowsARuntimeException","org.springframework.boot.env.OriginTrackedYamlLoaderTests.processSimpleKey","org.springframework.boot.env.OriginTrackedYamlLoaderTests.processCollection","org.springframework.boot.env.OriginTrackedYamlLoaderTests.processMultiline","org.springframework.boot.env.OriginTrackedYamlLoaderTests.processListOfMaps","org.springframework.boot.env.OriginTrackedYamlLoaderTests.processMap","org.springframework.boot.env.OriginTrackedYamlLoaderTests.processEmptyAndNullValues","org.springframework.boot.json.GsonJsonParserTests.simpleMap","org.springframework.boot.json.GsonJsonParserTests.listWithLeadingWhitespace","org.springframework.boot.json.GsonJsonParserTests.doubleValue","org.springframework.boot.json.GsonJsonParserTests.listWithNullThrowsARuntimeException","org.springframework.boot.json.GsonJsonParserTests.listWithEmptyStringThrowsARuntimeException","org.springframework.boot.json.GsonJsonParserTests.mapOfLists","org.springframework.boot.json.GsonJsonParserTests.simpleList","org.springframework.boot.json.GsonJsonParserTests.emptyList","org.springframework.boot.json.GsonJsonParserTests.stringContainingNumber","org.springframework.boot.json.GsonJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException","org.springframework.boot.json.GsonJsonParserTests.escapeQuote","org.springframework.boot.json.GsonJsonParserTests.stringContainingComma","org.springframework.boot.json.GsonJsonParserTests.listOfMaps","org.springframework.boot.json.GsonJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException","org.springframework.boot.json.GsonJsonParserTests.listWithMapThrowsARuntimeException","org.springframework.boot.json.GsonJsonParserTests.mapWithListThrowsARuntimeException","org.springframework.boot.json.GsonJsonParserTests.mapWithNullThrowsARuntimeException","org.springframework.boot.json.GsonJsonParserTests.emptyMap","org.springframework.boot.json.GsonJsonParserTests.mapWithLeadingWhitespace","org.springframework.boot.json.GsonJsonParserTests.mapWithEmptyStringThrowsARuntimeException","org.springframework.boot.env.PropertiesPropertySourceLoaderTests.getFileExtensions","org.springframework.boot.env.PropertiesPropertySourceLoaderTests.loadProperties","org.springframework.boot.env.PropertiesPropertySourceLoaderTests.loadXml","org.springframework.boot.json.BasicJsonParserTests.simpleMap","org.springframework.boot.json.BasicJsonParserTests.listWithLeadingWhitespace","org.springframework.boot.json.BasicJsonParserTests.doubleValue","org.springframework.boot.json.BasicJsonParserTests.listWithNullThrowsARuntimeException","org.springframework.boot.json.BasicJsonParserTests.listWithEmptyStringThrowsARuntimeException","org.springframework.boot.json.BasicJsonParserTests.mapOfLists","org.springframework.boot.json.BasicJsonParserTests.simpleList","org.springframework.boot.json.BasicJsonParserTests.emptyList","org.springframework.boot.json.BasicJsonParserTests.stringContainingNumber","org.springframework.boot.json.BasicJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException","org.springframework.boot.json.BasicJsonParserTests.escapeQuote","org.springframework.boot.json.BasicJsonParserTests.stringContainingComma","org.springframework.boot.json.BasicJsonParserTests.listOfMaps","org.springframework.boot.json.BasicJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException","org.springframework.boot.json.BasicJsonParserTests.listWithMapThrowsARuntimeException","org.springframework.boot.json.BasicJsonParserTests.mapWithListThrowsARuntimeException","org.springframework.boot.json.BasicJsonParserTests.mapWithNullThrowsARuntimeException","org.springframework.boot.json.BasicJsonParserTests.emptyMap","org.springframework.boot.json.BasicJsonParserTests.mapWithLeadingWhitespace","org.springframework.boot.json.BasicJsonParserTests.mapWithEmptyStringThrowsARuntimeException","org.springframework.boot.env.RandomValuePropertySourceTests.longOverflow","org.springframework.boot.env.RandomValuePropertySourceTests.uuidValue","org.springframework.boot.env.RandomValuePropertySourceTests.intMax","org.springframework.boot.env.RandomValuePropertySourceTests.string","org.springframework.boot.env.RandomValuePropertySourceTests.longRange","org.springframework.boot.env.RandomValuePropertySourceTests.longValue","org.springframework.boot.env.RandomValuePropertySourceTests.longMax","org.springframework.boot.env.RandomValuePropertySourceTests.intRange","org.springframework.boot.env.RandomValuePropertySourceTests.intValue","org.springframework.boot.env.RandomValuePropertySourceTests.notRandom","org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getPoolSizeOneConnection","org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getPoolSizeTwoConnections","org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getValidationQuery","org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getDefaultAutoCommit","org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getMinPoolSize","org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getPoolSizeNoConnection","org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getMaxPoolSize","org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.periodSeparated","org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.envVar","org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.prefixed","org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.nested","org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.propertySourceShouldTrackOrigin","org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.listOfObject","org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.list","org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.empty","org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.error","org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.missing","org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getPoolSizeOneConnection","org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getPoolSizeTwoConnections","org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getValidationQuery","org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getDefaultAutoCommit","org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getMinPoolSize","org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getPoolSizeNoConnection","org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getMaxPoolSize","org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.postProcessShouldReplaceSystemEnvironmentPropertySource","org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.replacedPropertySourceShouldBeOriginAware","org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.replacedPropertySourceShouldResolveProperty","org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.replacedPropertySourceWhenPropertyAbsentShouldReturnNullOrigin","org.springframework.boot.jdbc.metadata.CompositeDataSourcePoolMetadataProviderTests.createWithProviders","org.springframework.boot.env.YamlPropertySourceLoaderTests.mergeItems","org.springframework.boot.env.YamlPropertySourceLoaderTests.load","org.springframework.boot.env.YamlPropertySourceLoaderTests.loadOriginAware","org.springframework.boot.env.YamlPropertySourceLoaderTests.timestampLikeItemsDoNotBecomeDates","org.springframework.boot.env.YamlPropertySourceLoaderTests.orderedItems","org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolUsageWithUnlimitedPool","org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolUsageWithNoMax","org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolUsageWithNoCurrent","org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolSizeOneConnection","org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolSizeTwoConnections","org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getValidationQuery","org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getDefaultAutoCommit","org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getMinPoolSize","org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolSizeNoConnection","org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getMaxPoolSize","org.springframework.boot.info.BuildPropertiesTests.basicInfo","org.springframework.boot.info.BuildPropertiesTests.noInfo","org.springframework.boot.jdbc.EmbeddedDatabaseConnectionTests.getUrlWithEmptyDatabaseName","org.springframework.boot.jdbc.EmbeddedDatabaseConnectionTests.h2CustomDatabaseName","org.springframework.boot.jdbc.EmbeddedDatabaseConnectionTests.hsqlCustomDatabaseName","org.springframework.boot.jdbc.EmbeddedDatabaseConnectionTests.derbyCustomDatabaseName","org.springframework.boot.jdbc.EmbeddedDatabaseConnectionTests.getUrlWithNullDatabaseName","org.springframework.boot.info.GitPropertiesTests.basicInfo","org.springframework.boot.info.GitPropertiesTests.shortCommitUsedIfPresent","org.springframework.boot.info.GitPropertiesTests.noInfo","org.springframework.boot.info.GitPropertiesTests.coerceDateString","org.springframework.boot.info.GitPropertiesTests.coerceEpochSecond","org.springframework.boot.info.GitPropertiesTests.coerceUnsupportedFormat","org.springframework.boot.info.GitPropertiesTests.shortenCommitIdLongerThan7","org.springframework.boot.info.GitPropertiesTests.shortenCommitIdShorterThan7","org.springframework.boot.jdbc.DatabaseDriverTests.unknownOnNullProductName","org.springframework.boot.jdbc.DatabaseDriverTests.nullClassNameForUnknownDatabase","org.springframework.boot.jdbc.DatabaseDriverTests.failureOnMalformedJdbcUrl","org.springframework.boot.jdbc.DatabaseDriverTests.unknownOnNullJdbcUrl","org.springframework.boot.jdbc.DatabaseDriverTests.databaseJdbcUrlLookups","org.springframework.boot.jdbc.DatabaseDriverTests.databaseProductNameLookups","org.springframework.boot.jdbc.DatabaseDriverTests.classNameForKnownDatabase","org.springframework.boot.info.InfoPropertiesTests.toPropertySources","org.springframework.boot.info.InfoPropertiesTests.removeNotSupported","org.springframework.boot.info.InfoPropertiesTests.iterator","org.springframework.boot.info.InfoPropertiesTests.inputIsImmutable","org.springframework.boot.jdbc.DatabaseDriverClassNameTests.databaseClassIsOfRequiredType","org.springframework.boot.jackson.JsonComponentModuleTests.moduleShouldRegisterDeserializers","org.springframework.boot.jackson.JsonComponentModuleTests.moduleShouldRegisterSerializers","org.springframework.boot.jackson.JsonComponentModuleTests.moduleShouldRegisterInnerClasses","org.springframework.boot.jackson.JsonComponentModuleTests.moduleShouldAllowInnerAbstractClasses","org.springframework.boot.jdbc.DataSourceBuilderTests.defaultToHikari","org.springframework.boot.jdbc.DataSourceBuilderTests.specificTypeOfDataSource","org.springframework.boot.jdbc.DataSourceBuilderTests.defaultToCommonsDbcp2AsLastResort","org.springframework.boot.jdbc.DataSourceBuilderTests.defaultToTomcatIfHikariIsNotAvailable","org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenNodeIsFoundShouldReturnNode","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenValueIsNullShouldReturnNull","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsBooleanShouldReturnBoolean","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsFloatShouldReturnFloat","org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenTreeIsNullShouldThrowException","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsBigIntegerShouldReturnBigInteger","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsStringShouldReturnString","org.springframework.boot.jackson.JsonObjectDeserializerTests.deserializeObjectShouldReadJson","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsShortShouldReturnShort","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsBigDecimalShouldReturnBigDecimal","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsUnknownShouldThrowException","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsNullShouldThrowException","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsLongShouldReturnLong","org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenNodeIsNullShouldThrowException","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsDoubleShouldReturnDouble","org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenNodeIsNullNodeShouldThrowException","org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsIntegerShouldReturnInteger","org.springframework.boot.jackson.JsonObjectSerializerTests.serializeObjectShouldWriteJson"]}