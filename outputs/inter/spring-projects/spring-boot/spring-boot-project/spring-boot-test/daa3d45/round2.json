{"testOrder":["org.springframework.boot.test.context.AnnotatedClassFinderTests.findFromPackageWhenSourceIsNullShouldThrowException","org.springframework.boot.test.context.AnnotatedClassFinderTests.findFromClassWhenSourceIsNullShouldThrowException","org.springframework.boot.test.context.AnnotatedClassFinderTests.findFromPackageWhenConfigurationIsFoundShouldReturnConfiguration","org.springframework.boot.test.context.AnnotatedClassFinderTests.findFromClassWhenConfigurationIsFoundShouldReturnConfiguration","org.springframework.boot.test.context.AnnotatedClassFinderTests.findFromPackageWhenNoConfigurationFoundShouldReturnNull","org.springframework.boot.test.context.ConfigFileApplicationContextInitializerTests.initializerPopulatesEnvironment","org.springframework.boot.test.web.reactive.server.WebTestClientContextCustomizerIntegrationTests.test","org.springframework.boot.test.context.FilteredClassLoaderTests.loadClassWhenNotFilteredShouldLoadClass","org.springframework.boot.test.context.FilteredClassLoaderTests.loadClassWhenFilteredOnClassShouldThrowClassNotFound","org.springframework.boot.test.context.FilteredClassLoaderTests.loadClassWhenFilteredOnPackageShouldThrowClassNotFound","org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriverTests.createWithCapabilitiesWhenEnvironmentIsNullWillThrowException","org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriverTests.createWithJavascriptFlagWhenEnvironmentIsNullWillThrowException","org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriverTests.createWithBrowserVersionWhenEnvironmentIsNullWillThrowException","org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriverTests.createWhenEnvironmentIsNullWillThrowException","org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriverTests.getWhenUrlIsRelativeAndHasPortWillUseLocalhostPort","org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriverTests.getWhenUrlIsRelativeAndNoPortWillUseLocalhost8080","org.springframework.boot.test.context.ImportsContextCustomizerFactoryIntegrationTests.testItselfIsNotABean","org.springframework.boot.test.context.ImportsContextCustomizerFactoryIntegrationTests.beanWasImported","org.springframework.boot.test.web.htmlunit.LocalHostWebClientTests.getPageWhenUrlIsRelativeAndNoPortWillUseLocalhost8080","org.springframework.boot.test.web.htmlunit.LocalHostWebClientTests.createWhenEnvironmentIsNullWillThrowException","org.springframework.boot.test.web.htmlunit.LocalHostWebClientTests.getPageWhenUrlIsRelativeAndHasPortWillUseLocalhostPort","org.springframework.boot.test.context.ImportsContextCustomizerFactoryTests.getContextCustomizerWhenHasImportAnnotationShouldReturnCustomizer","org.springframework.boot.test.context.ImportsContextCustomizerFactoryTests.getContextCustomizerWhenHasNoImportAnnotationShouldReturnNull","org.springframework.boot.test.context.ImportsContextCustomizerFactoryTests.getContextCustomizerWhenClassHasBeanMethodsShouldThrowException","org.springframework.boot.test.context.ImportsContextCustomizerFactoryTests.contextCustomizerEqualsAndHashCode","org.springframework.boot.test.context.ImportsContextCustomizerFactoryTests.contextCustomizerImportsBeans","org.springframework.boot.test.context.ImportsContextCustomizerFactoryTests.selfAnnotatingAnnotationDoesNotCauseStackOverflow","org.springframework.boot.test.context.ImportsContextCustomizerFactoryTests.getContextCustomizerWhenHasMetaImportAnnotationShouldReturnCustomizer","org.springframework.boot.test.web.client.TestRestTemplateTests.exchangeWithRequestEntityAndParameterizedTypeReferenceHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.withBasicAuthAddsBasicAuthInterceptorWhenNotAlreadyPresent","org.springframework.boot.test.web.client.TestRestTemplateTests.exchangeWithRequestEntityAndClassHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.exchangeHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.executeHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.options","org.springframework.boot.test.web.client.TestRestTemplateTests.postForLocationHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.simple","org.springframework.boot.test.web.client.TestRestTemplateTests.deleteHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.putHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.optionsForAllowHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.patchForObjectHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.fromRestTemplateBuilder","org.springframework.boot.test.web.client.TestRestTemplateTests.exchangeWithParameterizedTypeReferenceHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.getRootUriRootUriSetViaRestTemplateBuilder","org.springframework.boot.test.web.client.TestRestTemplateTests.getRootUriRootUriNotSet","org.springframework.boot.test.web.client.TestRestTemplateTests.getForObjectHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.getForEntityHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.withBasicAuthDoesNotResetErrorHandler","org.springframework.boot.test.web.client.TestRestTemplateTests.withBasicAuthReplacesBasicAuthInterceptorWhenAlreadyPresent","org.springframework.boot.test.web.client.TestRestTemplateTests.postForObjectHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.postForEntityHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.getRootUriRootUriSetViaLocalHostUriTemplateHandler","org.springframework.boot.test.web.client.TestRestTemplateTests.authenticated","org.springframework.boot.test.web.client.TestRestTemplateTests.restOperationsAreAvailable","org.springframework.boot.test.web.client.TestRestTemplateTests.headForHeadersHandlesRelativeUris","org.springframework.boot.test.web.client.TestRestTemplateTests.doNotReplaceCustomRequestFactory","org.springframework.boot.test.context.ImportsContextCustomizerTests.customizersForTestClassesWithDifferentKotlinMetadataAreEqual","org.springframework.boot.test.context.ImportsContextCustomizerTests.customizersForTestClassesWithDifferentSpockFrameworkAnnotationsAreEqual","org.springframework.boot.test.context.ImportsContextCustomizerTests.determinableImportSelector","org.springframework.boot.test.context.ImportsContextCustomizerTests.customizersForTestClassesWithDifferentSpockLangAnnotationsAreEqual","org.springframework.boot.test.context.ImportsContextCustomizerTests.importSelectorsCouldUseAnyAnnotations","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.exchange with reified type parameters, String, HttpMethod, HttpEntity and varargs","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.postForObject with reified type parameters, String, Any and varargs","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.postForEntity with reified type parameters, String, Any and Map","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.getForEntity with reified type parameters and URI","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.patchForObject with reified type parameters","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.patchForObject with reified type parameters, String and Any","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.exchange with reified type parameters, String, HttpMethod, HttpEntity","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.exchange with reified type parameters, String and HttpMethod","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.postForObject with reified type parameters","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.getForObject with reified type parameters, String and varargs","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.exchange with reified type parameters and HttpEntity","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.postForEntity with reified type parameters, String and Any","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.postForObject with reified type parameters, String and Any","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.getForEntity with reified type parameters, String and varargs","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.postForEntity with reified type parameters, String, Any and varargs","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.getForEntity with reified type parameters, String and Map","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.getForObject with reified type parameters, String and Map","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.patchForObject with reified type parameters, String, Any and Map","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.postForObject with reified type parameters, String, Any and Map","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.getForObject with reified type parameters and URI","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.RestOperations are available","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.postForEntity with reified type parameters","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.exchange with reified type parameters, String, HttpMethod, HttpEntity and Map","org.springframework.boot.test.web.client.TestRestTemplateExtensionsTests.patchForObject with reified type parameters, String, Any and varargs","org.springframework.boot.test.context.SpringBootContextLoaderMockMvcTests.testMockHttpEndpoint","org.springframework.boot.test.context.SpringBootContextLoaderMockMvcTests.validateWebApplicationContextIsSet","org.springframework.boot.test.web.client.TestRestTemplateContextCustomizerWithOverrideIntegrationTests.test","org.springframework.boot.test.context.SpringBootContextLoaderTests.environmentPropertiesSeparatorInValue","org.springframework.boot.test.context.SpringBootContextLoaderTests.environmentPropertiesAppend","org.springframework.boot.test.context.SpringBootContextLoaderTests.environmentPropertiesAnotherSeparatorInValue","org.springframework.boot.test.context.SpringBootContextLoaderTests.environmentPropertiesOverrideDefaults","org.springframework.boot.test.context.SpringBootContextLoaderTests.environmentPropertiesSimple","org.springframework.boot.test.context.SpringBootContextLoaderTests.environmentPropertiesSimpleNonAlias","org.springframework.boot.test.context.SpringBootContextLoaderTests.environmentPropertiesNewLineInValue","org.springframework.boot.test.web.client.TestRestTemplateContextCustomizerIntegrationTests.test","org.springframework.boot.test.context.SpringBootTestActiveProfileTests.profiles","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.validateRequestWhenUriDoesNotStartWithRootUriShouldDelegateToExpectationManager","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.expectRequestShouldDelegateToExpectationManager","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.createWhenExpectationManagerIsNullShouldThrowException","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.resetRequestShouldDelegateToExpectationManager","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.bindToWithExpectationManagerShouldReturnMockRestServiceServer","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.validateRequestWhenUriStartsWithRootUriShouldReplaceUri","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.createWhenRootUriIsNullShouldThrowException","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.validateRequestWhenRequestUriAssertionIsThrownShouldReplaceUriInMessage","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.boundRestTemplateWhenUrlIncludesDomainShouldNotPrefixRootUri","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.bindToShouldReturnMockRestServiceServer","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.forRestTemplateWhenNotUsingRootUriTemplateHandlerShouldReturnOriginalRequestExpectationManager","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.boundRestTemplateShouldPrefixRootUri","org.springframework.boot.test.web.client.RootUriRequestExpectationManagerTests.forRestTemplateWhenUsingRootUriTemplateHandlerShouldReturnRootUriRequestExpectationManager","org.springframework.boot.test.context.SpringBootTestContextHierarchyTests.contextLoads","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.createShouldUseSimpleRequestExpectationManager","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.createShouldUseExpectationManagerClass","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.getServerWhenNoServersAreBoundShouldThrowException","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.getServerWhenSingleServerIsBoundShouldReturnServer","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.getServerWhenMultipleServersAreBoundShouldThrowException","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.getExpectationManagersShouldReturnExpectationManagers","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.getServerWhenRestTemplateIsFoundShouldReturnServer","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.customizeShouldBindServer","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.createWhenExpectationManagerClassIsNullShouldThrowException","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.getServersShouldReturnServers","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.getServerWhenRestTemplateIsNotFoundShouldReturnNull","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.detectRootUriShouldDefaultToTrue","org.springframework.boot.test.web.client.MockServerRestTemplateCustomizerTests.setDetectRootUriShouldDisableRootUriDetection","org.springframework.boot.test.context.SpringBootTestCustomConfigNameTests.propertyIsLoadedFromConfigFileWithCustomName","org.springframework.boot.test.web.client.LocalHostUriTemplateHandlerTests.expandShouldUseCustomHandler","org.springframework.boot.test.web.client.LocalHostUriTemplateHandlerTests.getRootUriShouldUseContextPath","org.springframework.boot.test.web.client.LocalHostUriTemplateHandlerTests.getRootUriWhenLocalServerPortMissingShouldUsePort8080","org.springframework.boot.test.web.client.LocalHostUriTemplateHandlerTests.createWhenEnvironmentIsNullShouldThrowException","org.springframework.boot.test.web.client.LocalHostUriTemplateHandlerTests.createWhenHandlerIsNullShouldThrowException","org.springframework.boot.test.web.client.LocalHostUriTemplateHandlerTests.getRootUriUsesCustomScheme","org.springframework.boot.test.web.client.LocalHostUriTemplateHandlerTests.getRootUriShouldUseLocalServerPort","org.springframework.boot.test.web.client.LocalHostUriTemplateHandlerTests.createWhenSchemeIsNullShouldThrowException","org.springframework.boot.test.context.SpringBootTestCustomPortTests.validatePortIsNotOverwritten","org.springframework.boot.test.web.SpringBootTestRandomPortEnvironmentPostProcessorTests.postProcessWhenTestServerPortIsZeroAndTestManagementPortIsNotNull","org.springframework.boot.test.web.SpringBootTestRandomPortEnvironmentPostProcessorTests.postProcessWhenServerAndManagementPortIsZeroInTestPropertySource","org.springframework.boot.test.web.SpringBootTestRandomPortEnvironmentPostProcessorTests.postProcessWhenTestServerPortIsZeroAndManagementPortIsNull","org.springframework.boot.test.web.SpringBootTestRandomPortEnvironmentPostProcessorTests.postProcessWhenTestServerPortIsZeroAndManagementPortIsAnInteger","org.springframework.boot.test.web.SpringBootTestRandomPortEnvironmentPostProcessorTests.postProcessWhenTestServerAndTestManagementPortAreNonZero","org.springframework.boot.test.web.SpringBootTestRandomPortEnvironmentPostProcessorTests.postProcessWhenTestServerPortIsZeroAndManagementPortIsNotNullAndDifferentInProduction","org.springframework.boot.test.web.SpringBootTestRandomPortEnvironmentPostProcessorTests.postProcessWhenTestServerPortIsZeroAndManagementPortMinusOne","org.springframework.boot.test.web.SpringBootTestRandomPortEnvironmentPostProcessorTests.postProcessWhenTestServerPortIsZeroAndManagementPortIsNotNullAndSameInProduction","org.springframework.boot.test.web.SpringBootTestRandomPortEnvironmentPostProcessorTests.postProcessWhenTestServerPortIsZeroAndManagementPortIsNotNullAndDefaultSameInProduction","org.springframework.boot.test.context.SpringBootTestDefaultConfigurationTests.nestedConfigClasses","org.springframework.boot.test.util.TestPropertyValuesTests.applyToExistingNameAndSameTypeShouldMerge","org.springframework.boot.test.util.TestPropertyValuesTests.applyToSystemPropertiesShouldRestoreSystemProperties","org.springframework.boot.test.util.TestPropertyValuesTests.applyToEnvironmentShouldAttachConfigurationPropertySource","org.springframework.boot.test.util.TestPropertyValuesTests.andShouldChainAndAddSingleKeyValue","org.springframework.boot.test.util.TestPropertyValuesTests.applyToDefaultPropertySource","org.springframework.boot.test.util.TestPropertyValuesTests.applyToSystemPropertiesShouldSetSystemProperties","org.springframework.boot.test.util.TestPropertyValuesTests.applyToSystemPropertiesWhenValueIsNullShouldRemoveProperty","org.springframework.boot.test.util.TestPropertyValuesTests.applyToSystemPropertySource","org.springframework.boot.test.util.TestPropertyValuesTests.applyToExistingNameAndDifferentTypeShouldOverrideExistingOne","org.springframework.boot.test.util.TestPropertyValuesTests.applyToWithSpecificName","org.springframework.boot.test.context.SpringBootTestGroovyConfigurationTests.groovyConfigLoaded","org.springframework.boot.test.util.ApplicationContextTestUtilsTests.closeNonClosableContext","org.springframework.boot.test.util.ApplicationContextTestUtilsTests.closeNull","org.springframework.boot.test.util.ApplicationContextTestUtilsTests.closeContextAndParent","org.springframework.boot.test.context.SpringBootTestGroovyConventionConfigurationTests.groovyConfigLoaded","org.springframework.boot.test.rule.OutputCaptureTests.toStringShouldReturnAllCapturedOutput","org.springframework.boot.test.rule.OutputCaptureTests.reset","org.springframework.boot.test.context.SpringBootTestJmxTests.disabledByDefault","org.springframework.boot.test.mock.web.SpringBootMockServletContextTests.getResourceLocation","org.springframework.boot.test.mock.web.SpringBootMockServletContextTests.getRootUrlExistsAndIsEmpty","org.springframework.boot.test.context.SpringBootTestMixedConfigurationTests.mixedConfigClasses","org.springframework.boot.test.mock.mockito.SpyDefinitionTests.createExplicit","org.springframework.boot.test.mock.mockito.SpyDefinitionTests.classToSpyMustNotBeNull","org.springframework.boot.test.mock.mockito.SpyDefinitionTests.createSpyTwice","org.springframework.boot.test.mock.mockito.SpyDefinitionTests.createSpyWhenNullInstanceShouldThrowException","org.springframework.boot.test.mock.mockito.SpyDefinitionTests.createSpy","org.springframework.boot.test.mock.mockito.SpyDefinitionTests.createWithDefaults","org.springframework.boot.test.mock.mockito.SpyDefinitionTests.createSpyWhenWrongInstanceShouldThrowException","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentDefinedPortTests.runAndTestHttpEndpoint","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentDefinedPortTests.injectTestRestTemplate","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentDefinedPortTests.injectWebTestClient","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentDefinedPortTests.annotationAttributesOverridePropertiesFile","org.springframework.boot.test.mock.mockito.SpyBeanWithNameOnTestFieldForMultipleExistingBeansTests.testSpying","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentRandomPortTests.runAndTestHttpEndpoint","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentRandomPortTests.injectTestRestTemplate","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentRandomPortTests.injectWebTestClient","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentRandomPortTests.annotationAttributesOverridePropertiesFile","org.springframework.boot.test.mock.mockito.SpyBeanWithDirtiesContextClassModeBeforeMethodIntegrationTests.testSpying","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentUserDefinedTestRestTemplateTests.restTemplateIsUserDefined","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentUserDefinedTestRestTemplateTests.runAndTestHttpEndpoint","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentUserDefinedTestRestTemplateTests.injectTestRestTemplate","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentUserDefinedTestRestTemplateTests.injectWebTestClient","org.springframework.boot.test.context.SpringBootTestReactiveWebEnvironmentUserDefinedTestRestTemplateTests.annotationAttributesOverridePropertiesFile","org.springframework.boot.test.mock.mockito.SpyBeanWithAopProxyTests.verifyShouldUseProxyTarget","org.springframework.boot.test.context.SpringBootTestUserDefinedTestRestTemplateTests.restTemplateIsUserDefined","org.springframework.boot.test.context.SpringBootTestUserDefinedTestRestTemplateTests.runAndTestHttpEndpoint","org.springframework.boot.test.context.SpringBootTestUserDefinedTestRestTemplateTests.injectTestRestTemplate","org.springframework.boot.test.context.SpringBootTestUserDefinedTestRestTemplateTests.annotationAttributesOverridePropertiesFile","org.springframework.boot.test.context.SpringBootTestUserDefinedTestRestTemplateTests.validateWebApplicationContextIsSet","org.springframework.boot.test.mock.mockito.SpyBeanWithAopProxyAndNotProxyTargetAwareTests.verifyShouldUseProxyTarget","org.springframework.boot.test.context.SpringBootTestWebEnvironmentContextHierarchyTests.testShouldOnlyStartSingleServer","org.springframework.boot.test.mock.mockito.SpyBeanOnTestFieldForNewBeanIntegrationTests.testSpying","org.springframework.boot.test.context.SpringBootTestWebEnvironmentDefinedPortTests.runAndTestHttpEndpoint","org.springframework.boot.test.context.SpringBootTestWebEnvironmentDefinedPortTests.injectTestRestTemplate","org.springframework.boot.test.context.SpringBootTestWebEnvironmentDefinedPortTests.annotationAttributesOverridePropertiesFile","org.springframework.boot.test.context.SpringBootTestWebEnvironmentDefinedPortTests.validateWebApplicationContextIsSet","org.springframework.boot.test.mock.mockito.SpyBeanOnTestFieldForMultipleExistingBeansWithOnePrimaryIntegrationTests.testSpying","org.springframework.boot.test.context.SpringBootTestWebEnvironmentMockTests.setsRequestContextHolder","org.springframework.boot.test.context.SpringBootTestWebEnvironmentMockTests.resourcePath","org.springframework.boot.test.context.SpringBootTestWebEnvironmentMockTests.annotationAttributesOverridePropertiesFile","org.springframework.boot.test.context.SpringBootTestWebEnvironmentMockTests.validateWebApplicationContextIsSet","org.springframework.boot.test.mock.mockito.SpyBeanOnTestFieldForExistingGenericBeanIntegrationTests.testSpying","org.springframework.boot.test.context.SpringBootTestWebEnvironmentMockWithWebAppConfigurationTests.resourcePath","org.springframework.boot.test.mock.mockito.SpyBeanOnTestFieldForExistingBeanWithQualifierIntegrationTests.testMocking","org.springframework.boot.test.mock.mockito.SpyBeanOnTestFieldForExistingBeanWithQualifierIntegrationTests.onlyQualifiedBeanIsReplaced","org.springframework.boot.test.context.SpringBootTestWebEnvironmentRandomPortCustomPortTests.validatePortIsNotOverwritten","org.springframework.boot.test.mock.mockito.SpyBeanOnTestFieldForExistingBeanIntegrationTests.testSpying","org.springframework.boot.test.context.SpringBootTestWebEnvironmentRandomPortTests.testRestTemplateShouldUseBuilder","org.springframework.boot.test.context.SpringBootTestWebEnvironmentRandomPortTests.runAndTestHttpEndpoint","org.springframework.boot.test.context.SpringBootTestWebEnvironmentRandomPortTests.injectTestRestTemplate","org.springframework.boot.test.context.SpringBootTestWebEnvironmentRandomPortTests.annotationAttributesOverridePropertiesFile","org.springframework.boot.test.context.SpringBootTestWebEnvironmentRandomPortTests.validateWebApplicationContextIsSet","org.springframework.boot.test.mock.mockito.SpyBeanOnTestFieldForExistingBeanCacheIntegrationTests.testSpying","org.springframework.boot.test.context.SpringBootTestWithClassesIntegrationTests.injectsOnlyConfig","org.springframework.boot.test.mock.mockito.SpyBeanOnTestClassForNewBeanIntegrationTests.testSpying","org.springframework.boot.test.context.SpringBootTestWithContextConfigurationIntegrationTests.injectsOnlyConfig","org.springframework.boot.test.mock.mockito.SpyBeanOnTestClassForExistingBeanIntegrationTests.testSpying","org.springframework.boot.test.context.SpringBootTestWithTestPropertySourceTests.propertyFromSpringBootTestProperties","org.springframework.boot.test.context.SpringBootTestWithTestPropertySourceTests.propertyFromPropertySourcePropertiesOverridesPropertyFromPropertySourceLocations","org.springframework.boot.test.context.SpringBootTestWithTestPropertySourceTests.propertyFromBootTestPropertiesOverridesPropertyFromPropertySourceLocations","org.springframework.boot.test.context.SpringBootTestWithTestPropertySourceTests.propertyFromTestPropertySourceLocations","org.springframework.boot.test.context.SpringBootTestWithTestPropertySourceTests.propertyFromPropertySourcePropertiesOverridesPropertyFromBootTestProperties","org.springframework.boot.test.context.SpringBootTestWithTestPropertySourceTests.propertyFromTestPropertySourceProperties","org.springframework.boot.test.mock.mockito.SpyBeanOnContextHierarchyIntegrationTests.testSpying","org.springframework.boot.test.context.SpringBootTestXmlConventionConfigurationTests.xmlConfigLoaded","org.springframework.boot.test.mock.mockito.SpyBeanOnConfigurationFieldForNewBeanIntegrationTests.testSpying","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getWhenContextTypeIsClassShouldThrowException","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getWhenContextTypeIsNullShouldThrowException","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getSourceContextWhenContextStartsShouldReturnSourceContext","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.toStringWhenContextStartsShouldReturnSimpleString","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getWhenTypeIsNullShouldThrowException","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getStartupFailureWhenContextStartsShouldReturnNull","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getStartupFailureWhenContextFailsToStartShouldReturnException","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.toStringWhenContextFailsToStartShouldReturnSimpleString","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.closeShouldCloseContext","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getWhenContextFailsShouldReturnProxyThatThrowsExceptions","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getSourceContextOfTypeWhenContextStartsShouldReturnSourceContext","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.assertThatWhenContextFailsShouldReturnAssertions","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getWhenSupplierIsNullShouldThrowException","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getSourceContextOfTypeWhenContextFailsToStartShouldThrowException","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.assertThatWhenContextStartsShouldReturnAssertions","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getSourceContextWhenContextFailsShouldThrowException","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getWhenContextStartsShouldReturnProxyThatCallsRealMethods","org.springframework.boot.test.context.assertj.ApplicationContextAssertProviderTests.getWhenTypeIsClassShouldThrowException","org.springframework.boot.test.mock.mockito.SpyBeanOnConfigurationFieldForExistingBeanIntegrationTests.testSpying","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.doesNotHaveBeanOfNameWhenFailedToStartShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getFailureWhenFailedShouldReturnFailure","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeansWhenHasNoBeansShouldReturnEmptyMapAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfTypeWhenInParentShouldReturnBeanAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfTypeWhenHasMultipleBeansIncludingParentShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.createWhenApplicationContextIsNullShouldThrowException","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanNamesWhenHasNamesShouldReturnNamesAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.doesNotHaveBeanOfTypeWhenFailedToStartShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanNamesWhenHasNoNamesShouldReturnEmptyAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasSingleBeanWhenHasNoBeansShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfTypeWhenHasNoBeanShouldReturnNullAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfTypeWhenInParentWithLimitedScopeShouldReturnNullAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfNameWhenHasBeanShouldReturnBeanAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.createWhenHasExceptionShouldSetFailure","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfNameAndTypeWhenFailedToStartShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.doesNotHaveBeanOfTypeWithLimitedScopeWhenInParentShouldPass","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasNotFailedWhenFailedShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasSingleBeanWhenFailedToStartShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.createWhenHasApplicationContextShouldSetActual","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeansWhenHasBeansShouldReturnMapAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfNameWhenHasNoBeanOfNameShouldReturnNullAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasBeanWhenHasBeanShouldPass","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasSingleBeanWhenInParentShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.doesNotHaveBeanOfTypeWhenInParentShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasSingleBeanWhenHasMultipleShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfNameAndTypeWhenHasBeanShouldReturnBeanAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasFailedWhenFailedShouldPass","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfNameWhenFailedToStartShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfTypeWhenFailedToStartShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasNotFailedWhenNotFailedShouldPass","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getFailureWhenDidNotFailShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfNameAndTypeWhenHasNoBeanOfNameButDifferentTypeShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeansWhenFailedToStartShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasBeanWhenHasNoBeanShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasBeanWhenNotStartedShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeansWithLimitedScopeShouldNotIncludeBeansFromParentScope","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanNamesWhenFailedToStartShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.doesNotHaveBeanOfNameWhenHasBeanOfTypeShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfTypeWhenHasBeanShouldReturnBeanAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfTypeWhenHasMultipleBeansShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.doesNotHaveBeanOfTypeWhenHasBeanOfTypeShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfTypeWithLimitedScopeWhenHasMultipleBeansIncludingParentShouldReturnBeanAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasFailedWhenNotFailedShouldFail","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeansShouldIncludeBeansFromParentScope","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.doesNotHaveBeanOfTypeWhenHasNoBeanOfTypeShouldPass","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.doesNotHaveBeanOfNameWhenHasNoBeanOfTypeShouldPass","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasSingleBeanWhenHasSingleBeanShouldPass","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.getBeanOfNameAndTypeWhenHasNoBeanOfNameShouldReturnNullAssert","org.springframework.boot.test.context.assertj.ApplicationContextAssertTests.hasSingleBeanWithLimitedScopeWhenInParentShouldPass","org.springframework.boot.test.mock.mockito.SpyBeanOnConfigurationClassForNewBeanIntegrationTests.testSpying","org.springframework.boot.test.context.assertj.AssertableApplicationContextTests.getShouldReturnProxy","org.springframework.boot.test.mock.mockito.SpyBeanOnConfigurationClassForExistingBeanIntegrationTests.testSpying","org.springframework.boot.test.context.assertj.AssertableReactiveWebApplicationContextTests.getShouldReturnProxy","org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListenerTests.test001","org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListenerTests.test002","org.springframework.boot.test.context.assertj.AssertableWebApplicationContextTests.getShouldReturnProxy","org.springframework.boot.test.mock.mockito.QualifierDefinitionTests.forElementFieldIsNullShouldReturnNull","org.springframework.boot.test.mock.mockito.QualifierDefinitionTests.hashCodeAndEqualsShouldWorkOnDifferentClasses","org.springframework.boot.test.mock.mockito.QualifierDefinitionTests.forElementWhenElementIsFieldWithNoQualifiersShouldReturnNull","org.springframework.boot.test.mock.mockito.QualifierDefinitionTests.forElementWhenElementIsNotFieldShouldReturnNull","org.springframework.boot.test.mock.mockito.QualifierDefinitionTests.matchesShouldCallBeanFactory","org.springframework.boot.test.mock.mockito.QualifierDefinitionTests.forElementWhenElementIsFieldWithQualifierShouldReturnDefinition","org.springframework.boot.test.mock.mockito.QualifierDefinitionTests.applyToShouldSetQualifierElement","org.springframework.boot.test.context.bootstrap.SpringBootTestContextBootstrapperIntegrationTests.defaultTestExecutionListenersPostProcessorShouldBeCalled","org.springframework.boot.test.context.bootstrap.SpringBootTestContextBootstrapperIntegrationTests.findConfigAutomatically","org.springframework.boot.test.context.bootstrap.SpringBootTestContextBootstrapperIntegrationTests.testConfigurationWasApplied","org.springframework.boot.test.context.bootstrap.SpringBootTestContextBootstrapperIntegrationTests.contextWasCreatedViaSpringApplication","org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.beforeTestMethodShouldInjectMockBeanWhenDirtiesContextAttributeIsSet","org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.prepareTestInstanceShouldInitMockitoAnnotations","org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.prepareTestInstanceShouldInjectMockBean","org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.beforeTestMethodShouldDoNothingWhenDirtiesContextAttributeIsNotSet","org.springframework.boot.test.context.bootstrap.SpringBootTestContextBootstrapperTests.springBootTestWithANonMockWebEnvironmentAndWebAppConfigurationFailsFast","org.springframework.boot.test.context.bootstrap.SpringBootTestContextBootstrapperTests.springBootTestWithAMockWebEnvironmentCanBeUsedWithWebAppConfiguration","org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.canSpyQualifiedBeanWithPrimaryBeanPresent","org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.cannotMockMultipleQualifiedBeans","org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.canSpyPrimaryBean","org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.canMockQualifiedBeanWithPrimaryBeanPresent","org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.cannotMockMultipleBeans","org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.canMockPrimaryBean","org.springframework.boot.test.mock.mockito.MockitoPostProcessorTests.canMockBeanProducedByFactoryBeanWithObjectTypeAttribute","org.springframework.boot.test.context.bootstrap.SpringBootTestContextBootstrapperWithContextConfigurationTests.findConfigAutomatically","org.springframework.boot.test.context.bootstrap.SpringBootTestContextBootstrapperWithContextConfigurationTests.contextWasCreatedViaSpringApplication","org.springframework.boot.test.mock.mockito.MockitoContextCustomizerTests.hashCodeAndEquals","org.springframework.boot.test.context.bootstrap.SpringBootTestContextBootstrapperWithInitializersTests.foundConfiguration","org.springframework.boot.test.mock.mockito.MockitoContextCustomizerFactoryTests.getContextCustomizerUsesMocksAsCacheKey","org.springframework.boot.test.mock.mockito.MockitoContextCustomizerFactoryTests.getContextCustomizerWithAnnotationReturnsCustomizer","org.springframework.boot.test.mock.mockito.MockitoContextCustomizerFactoryTests.getContextCustomizerWithoutAnnotationReturnsCustomizer","org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests.matchesJUnitJupiterTestClass","org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests.matchesJUnitJupiterTestFactoryClass","org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests.matchesTestConfiguration","org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests.matchesNestedConfigurationClassWithoutTestMethodsIfItHasExtendWith","org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests.matchesJUnitJupiterRepeatedTestClass","org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests.doesNotMatchRegularConfiguration","org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests.matchesNestedConfigurationClassWithoutTestMethodsIfItHasRunWith","org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests.matchesNestedConfiguration","org.springframework.boot.test.context.filter.TestTypeExcludeFilterTests.matchesJUnit4TestClass","org.springframework.boot.test.mock.mockito.MockResetTests.beforeAttachesReset","org.springframework.boot.test.mock.mockito.MockResetTests.withSettingsAttachesReset","org.springframework.boot.test.mock.mockito.MockResetTests.apply","org.springframework.boot.test.mock.mockito.MockResetTests.afterAttachesReset","org.springframework.boot.test.mock.mockito.MockResetTests.noneAttachesReset","org.springframework.boot.test.mock.mockito.MockResetTests.withSettingsOfNoneAttachesReset","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithInitializerShouldInitialize","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithMultiplePropertyValuesShouldAllAllValues","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithConfigurationsShouldRegisterConfigurations","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithFailedContextShouldReturnFailedAssertableContext","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithSystemPropertiesShouldSetAndRemoveProperties","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.thrownRuleWorksWithCheckedException","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithSystemPropertiesShouldRestoreOriginalProperties","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithPropertyValuesWhenHasExistingShouldReplaceValue","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithClassLoaderShouldSetClassLoaderOnContext","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithClassLoaderShouldSetClassLoaderOnConditionContext","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithSystemPropertiesWhenContextFailsShouldRemoveProperties","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithSystemPropertiesWhenValueIsNullShouldRemoveProperty","org.springframework.boot.test.context.runner.ApplicationContextRunnerTests.runWithMultipleConfigurationsShouldRegisterAllConfigurations","org.springframework.boot.test.mock.mockito.MockDefinitionTests.createExplicit","org.springframework.boot.test.mock.mockito.MockDefinitionTests.classToMockMustNotBeNull","org.springframework.boot.test.mock.mockito.MockDefinitionTests.createWithDefaults","org.springframework.boot.test.mock.mockito.MockDefinitionTests.createMock","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithInitializerShouldInitialize","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithMultiplePropertyValuesShouldAllAllValues","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithConfigurationsShouldRegisterConfigurations","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithFailedContextShouldReturnFailedAssertableContext","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithSystemPropertiesShouldSetAndRemoveProperties","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.thrownRuleWorksWithCheckedException","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithSystemPropertiesShouldRestoreOriginalProperties","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithPropertyValuesWhenHasExistingShouldReplaceValue","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithClassLoaderShouldSetClassLoaderOnContext","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithClassLoaderShouldSetClassLoaderOnConditionContext","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithSystemPropertiesWhenContextFailsShouldRemoveProperties","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithSystemPropertiesWhenValueIsNullShouldRemoveProperty","org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunnerTests.runWithMultipleConfigurationsShouldRegisterAllConfigurations","org.springframework.boot.test.mock.mockito.MockBeanWithInjectedFieldIntegrationTests.fieldInjectionIntoMyServiceMockIsNotAttempted","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.contextShouldHaveMockServletContext","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithInitializerShouldInitialize","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithMultiplePropertyValuesShouldAllAllValues","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithConfigurationsShouldRegisterConfigurations","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithFailedContextShouldReturnFailedAssertableContext","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithSystemPropertiesShouldSetAndRemoveProperties","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.thrownRuleWorksWithCheckedException","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithSystemPropertiesShouldRestoreOriginalProperties","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithPropertyValuesWhenHasExistingShouldReplaceValue","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithClassLoaderShouldSetClassLoaderOnContext","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithClassLoaderShouldSetClassLoaderOnConditionContext","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithSystemPropertiesWhenContextFailsShouldRemoveProperties","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithSystemPropertiesWhenValueIsNullShouldRemoveProperty","org.springframework.boot.test.context.runner.WebApplicationContextRunnerTests.runWithMultipleConfigurationsShouldRegisterAllConfigurations","org.springframework.boot.test.mock.mockito.MockBeanWithGenericsOnTestFieldForNewBeanIntegrationTests.testMocking","org.springframework.boot.test.json.BasicJsonTesterTests.fromByteArrayShouldReturnJsonContent","org.springframework.boot.test.json.BasicJsonTesterTests.fromFileShouldReturnJsonContent","org.springframework.boot.test.json.BasicJsonTesterTests.fromResourceStringShouldReturnJsonContent","org.springframework.boot.test.json.BasicJsonTesterTests.fromInputStreamShouldReturnJsonContent","org.springframework.boot.test.json.BasicJsonTesterTests.createWhenResourceLoadClassIsNullShouldThrowException","org.springframework.boot.test.json.BasicJsonTesterTests.fromJsonStringShouldReturnJsonContent","org.springframework.boot.test.json.BasicJsonTesterTests.fromResourceShouldReturnJsonContent","org.springframework.boot.test.json.BasicJsonTesterTests.fromResourceStringWithClassShouldReturnJsonContent","org.springframework.boot.test.mock.mockito.MockBeanWithDirtiesContextClassModeBeforeMethodIntegrationTests.testMocking","org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactoryTests.warningForMultipleVersions","org.springframework.boot.test.mock.mockito.MockBeanWithAsyncInterfaceMethodIntegrationTests.mockedMethodsAreNotAsync","org.springframework.boot.test.json.GsonTesterTests.initFieldsShouldSetNullFields","org.springframework.boot.test.json.GsonTesterTests.initFieldsWhenMarshallerIsNullShouldThrowException","org.springframework.boot.test.json.GsonTesterTests.initFieldsWhenTestIsNullShouldThrowException","org.springframework.boot.test.json.GsonTesterTests.parseStringShouldReturnObject","org.springframework.boot.test.json.GsonTesterTests.parseArrayShouldReturnContent","org.springframework.boot.test.json.GsonTesterTests.readInputStreamShouldReturnObject","org.springframework.boot.test.json.GsonTesterTests.createWhenTypeIsNullShouldThrowException","org.springframework.boot.test.json.GsonTesterTests.writeShouldReturnJsonContent","org.springframework.boot.test.json.GsonTesterTests.writeMapShouldReturnJsonContent","org.springframework.boot.test.json.GsonTesterTests.parseBytesShouldReturnObject","org.springframework.boot.test.json.GsonTesterTests.readResourcePathShouldReturnObject","org.springframework.boot.test.json.GsonTesterTests.readReaderShouldReturnObject","org.springframework.boot.test.json.GsonTesterTests.parseListShouldReturnContent","org.springframework.boot.test.json.GsonTesterTests.createWhenResourceLoadClassIsNullShouldThrowException","org.springframework.boot.test.json.GsonTesterTests.writeListShouldReturnJsonContent","org.springframework.boot.test.json.GsonTesterTests.readResourceShouldReturnObject","org.springframework.boot.test.json.GsonTesterTests.writeArrayShouldReturnJsonContent","org.springframework.boot.test.json.GsonTesterTests.parseMapShouldReturnContent","org.springframework.boot.test.json.GsonTesterTests.readFileShouldReturnObject","org.springframework.boot.test.mock.mockito.MockBeanWithAopProxyTests.verifyShouldUseProxyTarget","org.springframework.boot.test.json.JacksonTesterIntegrationTests.typicalTest","org.springframework.boot.test.json.JacksonTesterIntegrationTests.typicalMapTest","org.springframework.boot.test.json.JacksonTesterIntegrationTests.readWithResourceAndView","org.springframework.boot.test.json.JacksonTesterIntegrationTests.typicalListTest","org.springframework.boot.test.json.JacksonTesterIntegrationTests.readWithReaderAndView","org.springframework.boot.test.json.JacksonTesterIntegrationTests.writeWithView","org.springframework.boot.test.mock.mockito.MockBeanOnTestFieldForNewBeanIntegrationTests.testMocking","org.springframework.boot.test.json.JacksonTesterTests.initFieldsShouldSetNullFields","org.springframework.boot.test.json.JacksonTesterTests.initFieldsWhenMarshallerIsNullShouldThrowException","org.springframework.boot.test.json.JacksonTesterTests.initFieldsWhenTestIsNullShouldThrowException","org.springframework.boot.test.json.JacksonTesterTests.parseStringShouldReturnObject","org.springframework.boot.test.json.JacksonTesterTests.parseArrayShouldReturnContent","org.springframework.boot.test.json.JacksonTesterTests.readInputStreamShouldReturnObject","org.springframework.boot.test.json.JacksonTesterTests.createWhenTypeIsNullShouldThrowException","org.springframework.boot.test.json.JacksonTesterTests.writeShouldReturnJsonContent","org.springframework.boot.test.json.JacksonTesterTests.writeMapShouldReturnJsonContent","org.springframework.boot.test.json.JacksonTesterTests.parseBytesShouldReturnObject","org.springframework.boot.test.json.JacksonTesterTests.readResourcePathShouldReturnObject","org.springframework.boot.test.json.JacksonTesterTests.readReaderShouldReturnObject","org.springframework.boot.test.json.JacksonTesterTests.parseListShouldReturnContent","org.springframework.boot.test.json.JacksonTesterTests.createWhenResourceLoadClassIsNullShouldThrowException","org.springframework.boot.test.json.JacksonTesterTests.writeListShouldReturnJsonContent","org.springframework.boot.test.json.JacksonTesterTests.readResourceShouldReturnObject","org.springframework.boot.test.json.JacksonTesterTests.writeArrayShouldReturnJsonContent","org.springframework.boot.test.json.JacksonTesterTests.parseMapShouldReturnContent","org.springframework.boot.test.json.JacksonTesterTests.readFileShouldReturnObject","org.springframework.boot.test.mock.mockito.MockBeanOnTestFieldForExistingBeanWithQualifierIntegrationTests.testMocking","org.springframework.boot.test.mock.mockito.MockBeanOnTestFieldForExistingBeanWithQualifierIntegrationTests.onlyQualifiedBeanIsReplaced","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourceIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveEmptyJsonPathValueForIndefinitePathWithResults","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathBooleanValueForWrongType","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathIsNotMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenResourcePathIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenFileIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenStringIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenInputStreamIsNotMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenBytesAreMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathNumberValue","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenBytesAreNotMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourceIsMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenFileIsMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenStringIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathBooleanValue","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathArrayValueForAnEmptyArray","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathNumberValueForMissing","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathValueForAnEmptyArray","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenBytesAreMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasEmptyJsonPathValueForWhitespace","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenFileIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathIsNotMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenBytesAreNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveEmptyJsonPathValueForAnEmptyMap","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenInputStreamIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenStringIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasEmptyJsonPathValueForIndefinitePathWithEmptyResults","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathArrayValueForWrongType","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenStringIsMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenFileIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathStringValueForAnEmptyString","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveJsonPathValueForAnEmptyMap","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenFileIsNotMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenResourceIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenStringIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveJsonPathValueForAnEmptyArray","org.springframework.boot.test.json.JsonContentAssertTests.hasEmptyJsonPathValueForAnEmptyString","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathStringValueForEmptyString","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathMapValueForMissing","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveEmptyJsonPathValueForNumber","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathIsNotMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathNumberValueForWrongType","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenStringIsNotMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenStringIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathAndClassAreMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenBytesAreNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenResourcePathIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveEmptyJsonPathValueForString","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveEmptyJsonPathValueForBoolean","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenStringIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourceIsNotMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathArrayValue","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathMapValueForAnEmptyMap","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathArrayValueForMissing","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenInputStreamIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenFileIsMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenStringIsNotMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenBytesAreMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenBytesAreNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathValueForIndefinitePathWithEmptyResults","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathMapValue","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenFileIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenInputStreamIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveEmptyJsonPathValueForAnEmptyString","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenResourcePathIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathIsMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasEmptyJsonPathValueForAnEmptyArray","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenFileIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenFileIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveJsonPathValueForIndefinitePathWithEmptyResults","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenBytesAreMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenInputStreamIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathArrayValue","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenFileIsMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenBytesAreMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathNumberValueForNonNumber","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenFileIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathMapValueForEmpty","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathArrayValueForEmpty","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenBytesAreMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathValueForIndefinitePathWithResults","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathAndClassAreMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenInputStreamIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenInputStreamIsMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenStringIsNotMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenFileIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenNullActualShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenResourceIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenInputStreamIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathAndClassAreMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenResourcePathAndClassAreMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenResourcePathIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenInputStreamIsNotMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenInputStreamIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenInputStreamIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenInputStreamIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathStringValueForWrongType","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenBytesAreMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenStringIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathValue","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathValueForAnEmptyMap","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenResourceIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenStringIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathAndClassIsMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathNumberValue","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourceIsNotMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathAndClassIsNotMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenInputStreamIsMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenFileIsNotMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourceIsNotMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathStringValue","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveEmptyJsonPathValueForIndefinitePathWithEmptyResults","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenInputStreamIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenFileIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathMapValue","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveEmptyJsonPathValueForForAnEmptyArray","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathIsNotMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathArrayValueForNonArray","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenInputStreamIsMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenStringIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.hasEmptyJsonPathValueForAnEmptyMap","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathAndClassAreNotMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourceIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenStringIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenStringIsMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveJsonPathValue","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathIsMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenResourcePathIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathIsMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenResourceIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathMapValueForNonMap","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathStringValueForNonString","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenResourcePathIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenFileIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenBytesAreNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenFileIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathMapValueForWrongType","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourceIsMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNullWhenActualIsNullShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenBytesAreMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenBytesAreNotMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourceIsNotMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenResourcePathIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenBytesAreNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenBytesAreNotMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenResourceIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathIsMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenInputStreamIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenNullActualShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenStringIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenStringIsMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToWhenNullActualShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveEmptyJsonPathValueForArray","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourceIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourceIsMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathAndClassAreNotMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathIsMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenInputStreamIsMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenFileIsNotMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathAndClassIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathAndClassAreNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenResourceIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathBooleanValueForMissing","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenNullActualShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenBytesAreNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourceIsMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathAndClassAreNotMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenStringIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenInputStreamIsNotMatchingAndLenientShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourceIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenResourcePathAndClassAreNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveJsonPathValueForIndefinitePathWithResults","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenBytesAreMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenResourcePathIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathAndClassAreMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathBooleanValueForNonBoolean","org.springframework.boot.test.json.JsonContentAssertTests.doesNotHaveEmptyJsonPathValueForMap","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenInputStreamIsNotMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathBooleanValue","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenResourcePathAndClassIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathValueForMissing","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenResourceIsMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenInputStreamIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenFileIsMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenBytesAreNotMatchingAndLenientShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenStringIsNotMatchingAndComparatorShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenBytesAreMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenStringIsMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasJsonPathValue","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToWhenResourcePathIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isNotEqualToJsonWhenFileIsNotMatchingAndComparatorShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.hasEmptyJsonPathValueForIndefinitePathWithResults","org.springframework.boot.test.json.JsonContentAssertTests.isNotStrictlyEqualToJsonWhenResourceIsNotMatchingShouldPass","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenResourcePathAndClassIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathStringValueForMissing","org.springframework.boot.test.json.JsonContentAssertTests.extractingJsonPathStringValue","org.springframework.boot.test.json.JsonContentAssertTests.isEqualToJsonWhenResourcePathAndClassIsNotMatchingShouldFail","org.springframework.boot.test.json.JsonContentAssertTests.isStrictlyEqualToJsonWhenFileIsNotMatchingShouldFail","org.springframework.boot.test.mock.mockito.MockBeanOnTestFieldForExistingBeanIntegrationTests.testMocking","org.springframework.boot.test.json.JsonContentTests.getJsonShouldReturnJson","org.springframework.boot.test.json.JsonContentTests.createWhenJsonIsNullShouldThrowException","org.springframework.boot.test.json.JsonContentTests.toStringWhenHasNoTypeShouldReturnString","org.springframework.boot.test.json.JsonContentTests.createWhenTypeIsNullShouldCreateContent","org.springframework.boot.test.json.JsonContentTests.createWhenResourceLoadClassIsNullShouldThrowException","org.springframework.boot.test.json.JsonContentTests.assertThatShouldReturnJsonContentAssert","org.springframework.boot.test.json.JsonContentTests.toStringWhenHasTypeShouldReturnString","org.springframework.boot.test.mock.mockito.MockBeanOnTestFieldForExistingBeanCacheIntegrationTests.testMocking","org.springframework.boot.test.json.JsonbTesterTests.initFieldsShouldSetNullFields","org.springframework.boot.test.json.JsonbTesterTests.initFieldsWhenMarshallerIsNullShouldThrowException","org.springframework.boot.test.json.JsonbTesterTests.initFieldsWhenTestIsNullShouldThrowException","org.springframework.boot.test.json.JsonbTesterTests.parseStringShouldReturnObject","org.springframework.boot.test.json.JsonbTesterTests.parseArrayShouldReturnContent","org.springframework.boot.test.json.JsonbTesterTests.readInputStreamShouldReturnObject","org.springframework.boot.test.json.JsonbTesterTests.createWhenTypeIsNullShouldThrowException","org.springframework.boot.test.json.JsonbTesterTests.writeShouldReturnJsonContent","org.springframework.boot.test.json.JsonbTesterTests.writeMapShouldReturnJsonContent","org.springframework.boot.test.json.JsonbTesterTests.parseBytesShouldReturnObject","org.springframework.boot.test.json.JsonbTesterTests.readResourcePathShouldReturnObject","org.springframework.boot.test.json.JsonbTesterTests.readReaderShouldReturnObject","org.springframework.boot.test.json.JsonbTesterTests.parseListShouldReturnContent","org.springframework.boot.test.json.JsonbTesterTests.createWhenResourceLoadClassIsNullShouldThrowException","org.springframework.boot.test.json.JsonbTesterTests.writeListShouldReturnJsonContent","org.springframework.boot.test.json.JsonbTesterTests.readResourceShouldReturnObject","org.springframework.boot.test.json.JsonbTesterTests.writeArrayShouldReturnJsonContent","org.springframework.boot.test.json.JsonbTesterTests.parseMapShouldReturnContent","org.springframework.boot.test.json.JsonbTesterTests.readFileShouldReturnObject","org.springframework.boot.test.mock.mockito.MockBeanOnTestClassForNewBeanIntegrationTests.testMocking","org.springframework.boot.test.json.ObjectContentAssertTests.asArrayForArrayShouldReturnObjectArrayAssert","org.springframework.boot.test.json.ObjectContentAssertTests.asMapForNonMapShouldFail","org.springframework.boot.test.json.ObjectContentAssertTests.asArrayForNonArrayShouldFail","org.springframework.boot.test.json.ObjectContentAssertTests.asMapForMapShouldReturnMapAssert","org.springframework.boot.test.json.ObjectContentAssertTests.isEqualToWhenObjectsAreDifferentShouldFail","org.springframework.boot.test.json.ObjectContentAssertTests.isEqualToWhenObjectsAreEqualShouldPass","org.springframework.boot.test.mock.mockito.MockBeanOnTestClassForExistingBeanIntegrationTests.testMocking","org.springframework.boot.test.json.ObjectContentTests.assertThatShouldReturnObjectContentAssert","org.springframework.boot.test.json.ObjectContentTests.toStringWhenHasNoTypeShouldReturnString","org.springframework.boot.test.json.ObjectContentTests.createWhenObjectIsNullShouldThrowException","org.springframework.boot.test.json.ObjectContentTests.createWhenTypeIsNullShouldCreateContent","org.springframework.boot.test.json.ObjectContentTests.getObjectShouldReturnObject","org.springframework.boot.test.json.ObjectContentTests.toStringWhenHasTypeShouldReturnString","org.springframework.boot.test.mock.mockito.MockBeanOnScopedProxyTests.testMocking","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseMockBeanMultipleClasses","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseRepeatSpyBean","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseSingleSpyBean","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseMockBeanInferClassToMock","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseSpyBeanOnClassAndField","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseSpyBeanAttributes","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseSingleMockBean","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseMockBeanAttributes","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseSpyBeanMissingClassToMock","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseMockBeanMissingClassToMock","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseMockBeanOnClassAndField","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseMockBeanMultipleClassesWithName","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseSpyBeanMultipleClasses","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseSpyBeanInferClassToMock","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseRepeatMockBean","org.springframework.boot.test.mock.mockito.DefinitionsParserTests.parseSpyBeanMultipleClassesWithName","org.springframework.boot.test.mock.mockito.MockBeanOnContextHierarchyIntegrationTests.testMocking","org.springframework.boot.test.mock.mockito.MockBeanForBeanFactoryIntegrationTests.testName","org.springframework.boot.test.mock.mockito.MockBeanOnConfigurationFieldForNewBeanIntegrationTests.testMocking","org.springframework.boot.test.mock.mockito.MockBeanOnConfigurationClassForExistingBeanIntegrationTests.testMocking","org.springframework.boot.test.mock.mockito.MockBeanOnConfigurationFieldForExistingBeanIntegrationTests.testMocking","org.springframework.boot.test.mock.mockito.MockBeanOnConfigurationClassForNewBeanIntegrationTests.testMocking","org.springframework.boot.test.web.reactive.server.WebTestClientContextCustomizerWithOverrideIntegrationTests.test"]}